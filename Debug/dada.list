
dada.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002658  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002718  08002718  00012718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002788  08002788  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002788  08002788  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002788  08002788  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002788  08002788  00012788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800278c  0800278c  0001278c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000014  080027a4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080027a4  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f27  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000104e  00000000  00000000  00024f63  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000460  00000000  00000000  00025fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003c8  00000000  00000000  00026418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000fa4f  00000000  00000000  000267e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004e98  00000000  00000000  0003622f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000607e1  00000000  00000000  0003b0c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009b8a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f14  00000000  00000000  0009b924  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002700 	.word	0x08002700

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002700 	.word	0x08002700

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f8a9 	bl	8000380 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f82b 	bl	8000294 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f89b 	bl	8000380 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f891 	bl	8000380 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f839 	bl	80002e4 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f82f 	bl	80002e4 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__eqsf2>:
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	0042      	lsls	r2, r0, #1
 8000298:	024e      	lsls	r6, r1, #9
 800029a:	004c      	lsls	r4, r1, #1
 800029c:	0245      	lsls	r5, r0, #9
 800029e:	0a6d      	lsrs	r5, r5, #9
 80002a0:	0e12      	lsrs	r2, r2, #24
 80002a2:	0fc3      	lsrs	r3, r0, #31
 80002a4:	0a76      	lsrs	r6, r6, #9
 80002a6:	0e24      	lsrs	r4, r4, #24
 80002a8:	0fc9      	lsrs	r1, r1, #31
 80002aa:	2aff      	cmp	r2, #255	; 0xff
 80002ac:	d00f      	beq.n	80002ce <__eqsf2+0x3a>
 80002ae:	2cff      	cmp	r4, #255	; 0xff
 80002b0:	d011      	beq.n	80002d6 <__eqsf2+0x42>
 80002b2:	2001      	movs	r0, #1
 80002b4:	42a2      	cmp	r2, r4
 80002b6:	d000      	beq.n	80002ba <__eqsf2+0x26>
 80002b8:	bd70      	pop	{r4, r5, r6, pc}
 80002ba:	42b5      	cmp	r5, r6
 80002bc:	d1fc      	bne.n	80002b8 <__eqsf2+0x24>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d00d      	beq.n	80002de <__eqsf2+0x4a>
 80002c2:	2a00      	cmp	r2, #0
 80002c4:	d1f8      	bne.n	80002b8 <__eqsf2+0x24>
 80002c6:	0028      	movs	r0, r5
 80002c8:	1e45      	subs	r5, r0, #1
 80002ca:	41a8      	sbcs	r0, r5
 80002cc:	e7f4      	b.n	80002b8 <__eqsf2+0x24>
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d1f1      	bne.n	80002b8 <__eqsf2+0x24>
 80002d4:	e7eb      	b.n	80002ae <__eqsf2+0x1a>
 80002d6:	2001      	movs	r0, #1
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d1ed      	bne.n	80002b8 <__eqsf2+0x24>
 80002dc:	e7e9      	b.n	80002b2 <__eqsf2+0x1e>
 80002de:	2000      	movs	r0, #0
 80002e0:	e7ea      	b.n	80002b8 <__eqsf2+0x24>
 80002e2:	46c0      	nop			; (mov r8, r8)

080002e4 <__gesf2>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	004a      	lsls	r2, r1, #1
 80002e8:	024e      	lsls	r6, r1, #9
 80002ea:	0245      	lsls	r5, r0, #9
 80002ec:	0044      	lsls	r4, r0, #1
 80002ee:	0a6d      	lsrs	r5, r5, #9
 80002f0:	0e24      	lsrs	r4, r4, #24
 80002f2:	0fc3      	lsrs	r3, r0, #31
 80002f4:	0a76      	lsrs	r6, r6, #9
 80002f6:	0e12      	lsrs	r2, r2, #24
 80002f8:	0fc9      	lsrs	r1, r1, #31
 80002fa:	2cff      	cmp	r4, #255	; 0xff
 80002fc:	d015      	beq.n	800032a <__gesf2+0x46>
 80002fe:	2aff      	cmp	r2, #255	; 0xff
 8000300:	d00e      	beq.n	8000320 <__gesf2+0x3c>
 8000302:	2c00      	cmp	r4, #0
 8000304:	d115      	bne.n	8000332 <__gesf2+0x4e>
 8000306:	2a00      	cmp	r2, #0
 8000308:	d101      	bne.n	800030e <__gesf2+0x2a>
 800030a:	2e00      	cmp	r6, #0
 800030c:	d01c      	beq.n	8000348 <__gesf2+0x64>
 800030e:	2d00      	cmp	r5, #0
 8000310:	d014      	beq.n	800033c <__gesf2+0x58>
 8000312:	428b      	cmp	r3, r1
 8000314:	d027      	beq.n	8000366 <__gesf2+0x82>
 8000316:	2002      	movs	r0, #2
 8000318:	3b01      	subs	r3, #1
 800031a:	4018      	ands	r0, r3
 800031c:	3801      	subs	r0, #1
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0ee      	beq.n	8000302 <__gesf2+0x1e>
 8000324:	2002      	movs	r0, #2
 8000326:	4240      	negs	r0, r0
 8000328:	e7f9      	b.n	800031e <__gesf2+0x3a>
 800032a:	2d00      	cmp	r5, #0
 800032c:	d1fa      	bne.n	8000324 <__gesf2+0x40>
 800032e:	2aff      	cmp	r2, #255	; 0xff
 8000330:	d00e      	beq.n	8000350 <__gesf2+0x6c>
 8000332:	2a00      	cmp	r2, #0
 8000334:	d10e      	bne.n	8000354 <__gesf2+0x70>
 8000336:	2e00      	cmp	r6, #0
 8000338:	d0ed      	beq.n	8000316 <__gesf2+0x32>
 800033a:	e00b      	b.n	8000354 <__gesf2+0x70>
 800033c:	2301      	movs	r3, #1
 800033e:	3901      	subs	r1, #1
 8000340:	4399      	bics	r1, r3
 8000342:	0008      	movs	r0, r1
 8000344:	3001      	adds	r0, #1
 8000346:	e7ea      	b.n	800031e <__gesf2+0x3a>
 8000348:	2000      	movs	r0, #0
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0e7      	beq.n	800031e <__gesf2+0x3a>
 800034e:	e7e2      	b.n	8000316 <__gesf2+0x32>
 8000350:	2e00      	cmp	r6, #0
 8000352:	d1e7      	bne.n	8000324 <__gesf2+0x40>
 8000354:	428b      	cmp	r3, r1
 8000356:	d1de      	bne.n	8000316 <__gesf2+0x32>
 8000358:	4294      	cmp	r4, r2
 800035a:	dd05      	ble.n	8000368 <__gesf2+0x84>
 800035c:	2102      	movs	r1, #2
 800035e:	1e58      	subs	r0, r3, #1
 8000360:	4008      	ands	r0, r1
 8000362:	3801      	subs	r0, #1
 8000364:	e7db      	b.n	800031e <__gesf2+0x3a>
 8000366:	2400      	movs	r4, #0
 8000368:	42a2      	cmp	r2, r4
 800036a:	dc04      	bgt.n	8000376 <__gesf2+0x92>
 800036c:	42b5      	cmp	r5, r6
 800036e:	d8d2      	bhi.n	8000316 <__gesf2+0x32>
 8000370:	2000      	movs	r0, #0
 8000372:	42b5      	cmp	r5, r6
 8000374:	d2d3      	bcs.n	800031e <__gesf2+0x3a>
 8000376:	1e58      	subs	r0, r3, #1
 8000378:	2301      	movs	r3, #1
 800037a:	4398      	bics	r0, r3
 800037c:	3001      	adds	r0, #1
 800037e:	e7ce      	b.n	800031e <__gesf2+0x3a>

08000380 <__lesf2>:
 8000380:	b530      	push	{r4, r5, lr}
 8000382:	0042      	lsls	r2, r0, #1
 8000384:	0244      	lsls	r4, r0, #9
 8000386:	024d      	lsls	r5, r1, #9
 8000388:	0fc3      	lsrs	r3, r0, #31
 800038a:	0048      	lsls	r0, r1, #1
 800038c:	0a64      	lsrs	r4, r4, #9
 800038e:	0e12      	lsrs	r2, r2, #24
 8000390:	0a6d      	lsrs	r5, r5, #9
 8000392:	0e00      	lsrs	r0, r0, #24
 8000394:	0fc9      	lsrs	r1, r1, #31
 8000396:	2aff      	cmp	r2, #255	; 0xff
 8000398:	d012      	beq.n	80003c0 <__lesf2+0x40>
 800039a:	28ff      	cmp	r0, #255	; 0xff
 800039c:	d00c      	beq.n	80003b8 <__lesf2+0x38>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d112      	bne.n	80003c8 <__lesf2+0x48>
 80003a2:	2800      	cmp	r0, #0
 80003a4:	d119      	bne.n	80003da <__lesf2+0x5a>
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d117      	bne.n	80003da <__lesf2+0x5a>
 80003aa:	2c00      	cmp	r4, #0
 80003ac:	d02b      	beq.n	8000406 <__lesf2+0x86>
 80003ae:	2002      	movs	r0, #2
 80003b0:	3b01      	subs	r3, #1
 80003b2:	4018      	ands	r0, r3
 80003b4:	3801      	subs	r0, #1
 80003b6:	e026      	b.n	8000406 <__lesf2+0x86>
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	d0f0      	beq.n	800039e <__lesf2+0x1e>
 80003bc:	2002      	movs	r0, #2
 80003be:	e022      	b.n	8000406 <__lesf2+0x86>
 80003c0:	2c00      	cmp	r4, #0
 80003c2:	d1fb      	bne.n	80003bc <__lesf2+0x3c>
 80003c4:	28ff      	cmp	r0, #255	; 0xff
 80003c6:	d01f      	beq.n	8000408 <__lesf2+0x88>
 80003c8:	2800      	cmp	r0, #0
 80003ca:	d11f      	bne.n	800040c <__lesf2+0x8c>
 80003cc:	2d00      	cmp	r5, #0
 80003ce:	d11d      	bne.n	800040c <__lesf2+0x8c>
 80003d0:	2002      	movs	r0, #2
 80003d2:	3b01      	subs	r3, #1
 80003d4:	4018      	ands	r0, r3
 80003d6:	3801      	subs	r0, #1
 80003d8:	e015      	b.n	8000406 <__lesf2+0x86>
 80003da:	2c00      	cmp	r4, #0
 80003dc:	d00e      	beq.n	80003fc <__lesf2+0x7c>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d1e5      	bne.n	80003ae <__lesf2+0x2e>
 80003e2:	2200      	movs	r2, #0
 80003e4:	4290      	cmp	r0, r2
 80003e6:	dc04      	bgt.n	80003f2 <__lesf2+0x72>
 80003e8:	42ac      	cmp	r4, r5
 80003ea:	d8e0      	bhi.n	80003ae <__lesf2+0x2e>
 80003ec:	2000      	movs	r0, #0
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	d209      	bcs.n	8000406 <__lesf2+0x86>
 80003f2:	1e58      	subs	r0, r3, #1
 80003f4:	2301      	movs	r3, #1
 80003f6:	4398      	bics	r0, r3
 80003f8:	3001      	adds	r0, #1
 80003fa:	e004      	b.n	8000406 <__lesf2+0x86>
 80003fc:	2301      	movs	r3, #1
 80003fe:	3901      	subs	r1, #1
 8000400:	4399      	bics	r1, r3
 8000402:	0008      	movs	r0, r1
 8000404:	3001      	adds	r0, #1
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	2d00      	cmp	r5, #0
 800040a:	d1d7      	bne.n	80003bc <__lesf2+0x3c>
 800040c:	428b      	cmp	r3, r1
 800040e:	d1ce      	bne.n	80003ae <__lesf2+0x2e>
 8000410:	4282      	cmp	r2, r0
 8000412:	dde7      	ble.n	80003e4 <__lesf2+0x64>
 8000414:	2102      	movs	r1, #2
 8000416:	1e58      	subs	r0, r3, #1
 8000418:	4008      	ands	r0, r1
 800041a:	3801      	subs	r0, #1
 800041c:	e7f3      	b.n	8000406 <__lesf2+0x86>
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__aeabi_dmul>:
 8000420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000422:	4657      	mov	r7, sl
 8000424:	46de      	mov	lr, fp
 8000426:	464e      	mov	r6, r9
 8000428:	4645      	mov	r5, r8
 800042a:	b5e0      	push	{r5, r6, r7, lr}
 800042c:	4683      	mov	fp, r0
 800042e:	0006      	movs	r6, r0
 8000430:	030f      	lsls	r7, r1, #12
 8000432:	0048      	lsls	r0, r1, #1
 8000434:	b087      	sub	sp, #28
 8000436:	4692      	mov	sl, r2
 8000438:	001d      	movs	r5, r3
 800043a:	0b3f      	lsrs	r7, r7, #12
 800043c:	0d40      	lsrs	r0, r0, #21
 800043e:	0fcc      	lsrs	r4, r1, #31
 8000440:	2800      	cmp	r0, #0
 8000442:	d100      	bne.n	8000446 <__aeabi_dmul+0x26>
 8000444:	e06f      	b.n	8000526 <__aeabi_dmul+0x106>
 8000446:	4bde      	ldr	r3, [pc, #888]	; (80007c0 <__aeabi_dmul+0x3a0>)
 8000448:	4298      	cmp	r0, r3
 800044a:	d038      	beq.n	80004be <__aeabi_dmul+0x9e>
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	00ff      	lsls	r7, r7, #3
 8000450:	041b      	lsls	r3, r3, #16
 8000452:	431f      	orrs	r7, r3
 8000454:	0f73      	lsrs	r3, r6, #29
 8000456:	433b      	orrs	r3, r7
 8000458:	9301      	str	r3, [sp, #4]
 800045a:	4bda      	ldr	r3, [pc, #872]	; (80007c4 <__aeabi_dmul+0x3a4>)
 800045c:	2700      	movs	r7, #0
 800045e:	4699      	mov	r9, r3
 8000460:	2300      	movs	r3, #0
 8000462:	469b      	mov	fp, r3
 8000464:	00f6      	lsls	r6, r6, #3
 8000466:	4481      	add	r9, r0
 8000468:	032b      	lsls	r3, r5, #12
 800046a:	0069      	lsls	r1, r5, #1
 800046c:	0b1b      	lsrs	r3, r3, #12
 800046e:	4652      	mov	r2, sl
 8000470:	4698      	mov	r8, r3
 8000472:	0d49      	lsrs	r1, r1, #21
 8000474:	0fed      	lsrs	r5, r5, #31
 8000476:	2900      	cmp	r1, #0
 8000478:	d100      	bne.n	800047c <__aeabi_dmul+0x5c>
 800047a:	e085      	b.n	8000588 <__aeabi_dmul+0x168>
 800047c:	4bd0      	ldr	r3, [pc, #832]	; (80007c0 <__aeabi_dmul+0x3a0>)
 800047e:	4299      	cmp	r1, r3
 8000480:	d100      	bne.n	8000484 <__aeabi_dmul+0x64>
 8000482:	e073      	b.n	800056c <__aeabi_dmul+0x14c>
 8000484:	4643      	mov	r3, r8
 8000486:	00da      	lsls	r2, r3, #3
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	041b      	lsls	r3, r3, #16
 800048c:	4313      	orrs	r3, r2
 800048e:	4652      	mov	r2, sl
 8000490:	48cc      	ldr	r0, [pc, #816]	; (80007c4 <__aeabi_dmul+0x3a4>)
 8000492:	0f52      	lsrs	r2, r2, #29
 8000494:	4684      	mov	ip, r0
 8000496:	4313      	orrs	r3, r2
 8000498:	4652      	mov	r2, sl
 800049a:	2000      	movs	r0, #0
 800049c:	4461      	add	r1, ip
 800049e:	00d2      	lsls	r2, r2, #3
 80004a0:	4489      	add	r9, r1
 80004a2:	0021      	movs	r1, r4
 80004a4:	4069      	eors	r1, r5
 80004a6:	9100      	str	r1, [sp, #0]
 80004a8:	468c      	mov	ip, r1
 80004aa:	2101      	movs	r1, #1
 80004ac:	4449      	add	r1, r9
 80004ae:	468a      	mov	sl, r1
 80004b0:	2f0f      	cmp	r7, #15
 80004b2:	d900      	bls.n	80004b6 <__aeabi_dmul+0x96>
 80004b4:	e090      	b.n	80005d8 <__aeabi_dmul+0x1b8>
 80004b6:	49c4      	ldr	r1, [pc, #784]	; (80007c8 <__aeabi_dmul+0x3a8>)
 80004b8:	00bf      	lsls	r7, r7, #2
 80004ba:	59cf      	ldr	r7, [r1, r7]
 80004bc:	46bf      	mov	pc, r7
 80004be:	465b      	mov	r3, fp
 80004c0:	433b      	orrs	r3, r7
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	d000      	beq.n	80004c8 <__aeabi_dmul+0xa8>
 80004c6:	e16a      	b.n	800079e <__aeabi_dmul+0x37e>
 80004c8:	2302      	movs	r3, #2
 80004ca:	2708      	movs	r7, #8
 80004cc:	2600      	movs	r6, #0
 80004ce:	4681      	mov	r9, r0
 80004d0:	469b      	mov	fp, r3
 80004d2:	e7c9      	b.n	8000468 <__aeabi_dmul+0x48>
 80004d4:	0032      	movs	r2, r6
 80004d6:	4658      	mov	r0, fp
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	4661      	mov	r1, ip
 80004dc:	9100      	str	r1, [sp, #0]
 80004de:	2802      	cmp	r0, #2
 80004e0:	d100      	bne.n	80004e4 <__aeabi_dmul+0xc4>
 80004e2:	e075      	b.n	80005d0 <__aeabi_dmul+0x1b0>
 80004e4:	2803      	cmp	r0, #3
 80004e6:	d100      	bne.n	80004ea <__aeabi_dmul+0xca>
 80004e8:	e1fe      	b.n	80008e8 <__aeabi_dmul+0x4c8>
 80004ea:	2801      	cmp	r0, #1
 80004ec:	d000      	beq.n	80004f0 <__aeabi_dmul+0xd0>
 80004ee:	e12c      	b.n	800074a <__aeabi_dmul+0x32a>
 80004f0:	2300      	movs	r3, #0
 80004f2:	2700      	movs	r7, #0
 80004f4:	2600      	movs	r6, #0
 80004f6:	2500      	movs	r5, #0
 80004f8:	033f      	lsls	r7, r7, #12
 80004fa:	0d2a      	lsrs	r2, r5, #20
 80004fc:	0b3f      	lsrs	r7, r7, #12
 80004fe:	48b3      	ldr	r0, [pc, #716]	; (80007cc <__aeabi_dmul+0x3ac>)
 8000500:	0512      	lsls	r2, r2, #20
 8000502:	433a      	orrs	r2, r7
 8000504:	4002      	ands	r2, r0
 8000506:	051b      	lsls	r3, r3, #20
 8000508:	4313      	orrs	r3, r2
 800050a:	9a00      	ldr	r2, [sp, #0]
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	07d1      	lsls	r1, r2, #31
 8000510:	085b      	lsrs	r3, r3, #1
 8000512:	430b      	orrs	r3, r1
 8000514:	0030      	movs	r0, r6
 8000516:	0019      	movs	r1, r3
 8000518:	b007      	add	sp, #28
 800051a:	bc3c      	pop	{r2, r3, r4, r5}
 800051c:	4690      	mov	r8, r2
 800051e:	4699      	mov	r9, r3
 8000520:	46a2      	mov	sl, r4
 8000522:	46ab      	mov	fp, r5
 8000524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000526:	465b      	mov	r3, fp
 8000528:	433b      	orrs	r3, r7
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	d100      	bne.n	8000530 <__aeabi_dmul+0x110>
 800052e:	e12f      	b.n	8000790 <__aeabi_dmul+0x370>
 8000530:	2f00      	cmp	r7, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_dmul+0x116>
 8000534:	e1a5      	b.n	8000882 <__aeabi_dmul+0x462>
 8000536:	0038      	movs	r0, r7
 8000538:	f000 fa9a 	bl	8000a70 <__clzsi2>
 800053c:	0003      	movs	r3, r0
 800053e:	3b0b      	subs	r3, #11
 8000540:	2b1c      	cmp	r3, #28
 8000542:	dd00      	ble.n	8000546 <__aeabi_dmul+0x126>
 8000544:	e196      	b.n	8000874 <__aeabi_dmul+0x454>
 8000546:	221d      	movs	r2, #29
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	465a      	mov	r2, fp
 800054c:	0001      	movs	r1, r0
 800054e:	40da      	lsrs	r2, r3
 8000550:	465e      	mov	r6, fp
 8000552:	3908      	subs	r1, #8
 8000554:	408f      	lsls	r7, r1
 8000556:	0013      	movs	r3, r2
 8000558:	408e      	lsls	r6, r1
 800055a:	433b      	orrs	r3, r7
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	4b9c      	ldr	r3, [pc, #624]	; (80007d0 <__aeabi_dmul+0x3b0>)
 8000560:	2700      	movs	r7, #0
 8000562:	1a1b      	subs	r3, r3, r0
 8000564:	4699      	mov	r9, r3
 8000566:	2300      	movs	r3, #0
 8000568:	469b      	mov	fp, r3
 800056a:	e77d      	b.n	8000468 <__aeabi_dmul+0x48>
 800056c:	4641      	mov	r1, r8
 800056e:	4653      	mov	r3, sl
 8000570:	430b      	orrs	r3, r1
 8000572:	4993      	ldr	r1, [pc, #588]	; (80007c0 <__aeabi_dmul+0x3a0>)
 8000574:	468c      	mov	ip, r1
 8000576:	44e1      	add	r9, ip
 8000578:	2b00      	cmp	r3, #0
 800057a:	d000      	beq.n	800057e <__aeabi_dmul+0x15e>
 800057c:	e11a      	b.n	80007b4 <__aeabi_dmul+0x394>
 800057e:	2202      	movs	r2, #2
 8000580:	2002      	movs	r0, #2
 8000582:	4317      	orrs	r7, r2
 8000584:	2200      	movs	r2, #0
 8000586:	e78c      	b.n	80004a2 <__aeabi_dmul+0x82>
 8000588:	4313      	orrs	r3, r2
 800058a:	d100      	bne.n	800058e <__aeabi_dmul+0x16e>
 800058c:	e10d      	b.n	80007aa <__aeabi_dmul+0x38a>
 800058e:	4643      	mov	r3, r8
 8000590:	2b00      	cmp	r3, #0
 8000592:	d100      	bne.n	8000596 <__aeabi_dmul+0x176>
 8000594:	e181      	b.n	800089a <__aeabi_dmul+0x47a>
 8000596:	4640      	mov	r0, r8
 8000598:	f000 fa6a 	bl	8000a70 <__clzsi2>
 800059c:	0002      	movs	r2, r0
 800059e:	3a0b      	subs	r2, #11
 80005a0:	2a1c      	cmp	r2, #28
 80005a2:	dd00      	ble.n	80005a6 <__aeabi_dmul+0x186>
 80005a4:	e172      	b.n	800088c <__aeabi_dmul+0x46c>
 80005a6:	0001      	movs	r1, r0
 80005a8:	4643      	mov	r3, r8
 80005aa:	3908      	subs	r1, #8
 80005ac:	408b      	lsls	r3, r1
 80005ae:	4698      	mov	r8, r3
 80005b0:	231d      	movs	r3, #29
 80005b2:	1a9a      	subs	r2, r3, r2
 80005b4:	4653      	mov	r3, sl
 80005b6:	40d3      	lsrs	r3, r2
 80005b8:	001a      	movs	r2, r3
 80005ba:	4643      	mov	r3, r8
 80005bc:	4313      	orrs	r3, r2
 80005be:	4652      	mov	r2, sl
 80005c0:	408a      	lsls	r2, r1
 80005c2:	4649      	mov	r1, r9
 80005c4:	1a08      	subs	r0, r1, r0
 80005c6:	4982      	ldr	r1, [pc, #520]	; (80007d0 <__aeabi_dmul+0x3b0>)
 80005c8:	4689      	mov	r9, r1
 80005ca:	4481      	add	r9, r0
 80005cc:	2000      	movs	r0, #0
 80005ce:	e768      	b.n	80004a2 <__aeabi_dmul+0x82>
 80005d0:	4b7b      	ldr	r3, [pc, #492]	; (80007c0 <__aeabi_dmul+0x3a0>)
 80005d2:	2700      	movs	r7, #0
 80005d4:	2600      	movs	r6, #0
 80005d6:	e78e      	b.n	80004f6 <__aeabi_dmul+0xd6>
 80005d8:	0c14      	lsrs	r4, r2, #16
 80005da:	0412      	lsls	r2, r2, #16
 80005dc:	0c12      	lsrs	r2, r2, #16
 80005de:	0011      	movs	r1, r2
 80005e0:	0c37      	lsrs	r7, r6, #16
 80005e2:	0436      	lsls	r6, r6, #16
 80005e4:	0c35      	lsrs	r5, r6, #16
 80005e6:	4379      	muls	r1, r7
 80005e8:	0028      	movs	r0, r5
 80005ea:	468c      	mov	ip, r1
 80005ec:	002e      	movs	r6, r5
 80005ee:	4360      	muls	r0, r4
 80005f0:	4460      	add	r0, ip
 80005f2:	4683      	mov	fp, r0
 80005f4:	4356      	muls	r6, r2
 80005f6:	0021      	movs	r1, r4
 80005f8:	0c30      	lsrs	r0, r6, #16
 80005fa:	4680      	mov	r8, r0
 80005fc:	4658      	mov	r0, fp
 80005fe:	4379      	muls	r1, r7
 8000600:	4440      	add	r0, r8
 8000602:	9102      	str	r1, [sp, #8]
 8000604:	4584      	cmp	ip, r0
 8000606:	d906      	bls.n	8000616 <__aeabi_dmul+0x1f6>
 8000608:	4688      	mov	r8, r1
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	0249      	lsls	r1, r1, #9
 800060e:	468c      	mov	ip, r1
 8000610:	44e0      	add	r8, ip
 8000612:	4641      	mov	r1, r8
 8000614:	9102      	str	r1, [sp, #8]
 8000616:	0436      	lsls	r6, r6, #16
 8000618:	0c01      	lsrs	r1, r0, #16
 800061a:	0c36      	lsrs	r6, r6, #16
 800061c:	0400      	lsls	r0, r0, #16
 800061e:	468b      	mov	fp, r1
 8000620:	1981      	adds	r1, r0, r6
 8000622:	0c1e      	lsrs	r6, r3, #16
 8000624:	041b      	lsls	r3, r3, #16
 8000626:	0c1b      	lsrs	r3, r3, #16
 8000628:	9103      	str	r1, [sp, #12]
 800062a:	0019      	movs	r1, r3
 800062c:	4379      	muls	r1, r7
 800062e:	468c      	mov	ip, r1
 8000630:	0028      	movs	r0, r5
 8000632:	4375      	muls	r5, r6
 8000634:	4465      	add	r5, ip
 8000636:	46a8      	mov	r8, r5
 8000638:	4358      	muls	r0, r3
 800063a:	0c05      	lsrs	r5, r0, #16
 800063c:	4445      	add	r5, r8
 800063e:	4377      	muls	r7, r6
 8000640:	42a9      	cmp	r1, r5
 8000642:	d903      	bls.n	800064c <__aeabi_dmul+0x22c>
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	0249      	lsls	r1, r1, #9
 8000648:	468c      	mov	ip, r1
 800064a:	4467      	add	r7, ip
 800064c:	0c29      	lsrs	r1, r5, #16
 800064e:	468c      	mov	ip, r1
 8000650:	0039      	movs	r1, r7
 8000652:	0400      	lsls	r0, r0, #16
 8000654:	0c00      	lsrs	r0, r0, #16
 8000656:	042d      	lsls	r5, r5, #16
 8000658:	182d      	adds	r5, r5, r0
 800065a:	4461      	add	r1, ip
 800065c:	44ab      	add	fp, r5
 800065e:	9105      	str	r1, [sp, #20]
 8000660:	4659      	mov	r1, fp
 8000662:	9104      	str	r1, [sp, #16]
 8000664:	9901      	ldr	r1, [sp, #4]
 8000666:	040f      	lsls	r7, r1, #16
 8000668:	0c3f      	lsrs	r7, r7, #16
 800066a:	0c08      	lsrs	r0, r1, #16
 800066c:	0039      	movs	r1, r7
 800066e:	4351      	muls	r1, r2
 8000670:	4342      	muls	r2, r0
 8000672:	4690      	mov	r8, r2
 8000674:	0002      	movs	r2, r0
 8000676:	468c      	mov	ip, r1
 8000678:	0c09      	lsrs	r1, r1, #16
 800067a:	468b      	mov	fp, r1
 800067c:	4362      	muls	r2, r4
 800067e:	437c      	muls	r4, r7
 8000680:	4444      	add	r4, r8
 8000682:	445c      	add	r4, fp
 8000684:	45a0      	cmp	r8, r4
 8000686:	d903      	bls.n	8000690 <__aeabi_dmul+0x270>
 8000688:	2180      	movs	r1, #128	; 0x80
 800068a:	0249      	lsls	r1, r1, #9
 800068c:	4688      	mov	r8, r1
 800068e:	4442      	add	r2, r8
 8000690:	0c21      	lsrs	r1, r4, #16
 8000692:	4688      	mov	r8, r1
 8000694:	4661      	mov	r1, ip
 8000696:	0409      	lsls	r1, r1, #16
 8000698:	0c09      	lsrs	r1, r1, #16
 800069a:	468c      	mov	ip, r1
 800069c:	0039      	movs	r1, r7
 800069e:	4359      	muls	r1, r3
 80006a0:	4343      	muls	r3, r0
 80006a2:	4370      	muls	r0, r6
 80006a4:	437e      	muls	r6, r7
 80006a6:	0c0f      	lsrs	r7, r1, #16
 80006a8:	18f6      	adds	r6, r6, r3
 80006aa:	0424      	lsls	r4, r4, #16
 80006ac:	19be      	adds	r6, r7, r6
 80006ae:	4464      	add	r4, ip
 80006b0:	4442      	add	r2, r8
 80006b2:	468c      	mov	ip, r1
 80006b4:	42b3      	cmp	r3, r6
 80006b6:	d903      	bls.n	80006c0 <__aeabi_dmul+0x2a0>
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	025b      	lsls	r3, r3, #9
 80006bc:	4698      	mov	r8, r3
 80006be:	4440      	add	r0, r8
 80006c0:	9b02      	ldr	r3, [sp, #8]
 80006c2:	4661      	mov	r1, ip
 80006c4:	4698      	mov	r8, r3
 80006c6:	9b04      	ldr	r3, [sp, #16]
 80006c8:	0437      	lsls	r7, r6, #16
 80006ca:	4443      	add	r3, r8
 80006cc:	469b      	mov	fp, r3
 80006ce:	45ab      	cmp	fp, r5
 80006d0:	41ad      	sbcs	r5, r5
 80006d2:	426b      	negs	r3, r5
 80006d4:	040d      	lsls	r5, r1, #16
 80006d6:	9905      	ldr	r1, [sp, #20]
 80006d8:	0c2d      	lsrs	r5, r5, #16
 80006da:	468c      	mov	ip, r1
 80006dc:	197f      	adds	r7, r7, r5
 80006de:	4467      	add	r7, ip
 80006e0:	18fd      	adds	r5, r7, r3
 80006e2:	46a8      	mov	r8, r5
 80006e4:	465d      	mov	r5, fp
 80006e6:	192d      	adds	r5, r5, r4
 80006e8:	42a5      	cmp	r5, r4
 80006ea:	41a4      	sbcs	r4, r4
 80006ec:	4693      	mov	fp, r2
 80006ee:	4264      	negs	r4, r4
 80006f0:	46a4      	mov	ip, r4
 80006f2:	44c3      	add	fp, r8
 80006f4:	44dc      	add	ip, fp
 80006f6:	428f      	cmp	r7, r1
 80006f8:	41bf      	sbcs	r7, r7
 80006fa:	4598      	cmp	r8, r3
 80006fc:	419b      	sbcs	r3, r3
 80006fe:	4593      	cmp	fp, r2
 8000700:	4192      	sbcs	r2, r2
 8000702:	45a4      	cmp	ip, r4
 8000704:	41a4      	sbcs	r4, r4
 8000706:	425b      	negs	r3, r3
 8000708:	427f      	negs	r7, r7
 800070a:	431f      	orrs	r7, r3
 800070c:	0c36      	lsrs	r6, r6, #16
 800070e:	4252      	negs	r2, r2
 8000710:	4264      	negs	r4, r4
 8000712:	19bf      	adds	r7, r7, r6
 8000714:	4322      	orrs	r2, r4
 8000716:	18bf      	adds	r7, r7, r2
 8000718:	4662      	mov	r2, ip
 800071a:	1838      	adds	r0, r7, r0
 800071c:	0243      	lsls	r3, r0, #9
 800071e:	0dd2      	lsrs	r2, r2, #23
 8000720:	9903      	ldr	r1, [sp, #12]
 8000722:	4313      	orrs	r3, r2
 8000724:	026a      	lsls	r2, r5, #9
 8000726:	430a      	orrs	r2, r1
 8000728:	1e50      	subs	r0, r2, #1
 800072a:	4182      	sbcs	r2, r0
 800072c:	4661      	mov	r1, ip
 800072e:	0ded      	lsrs	r5, r5, #23
 8000730:	432a      	orrs	r2, r5
 8000732:	024e      	lsls	r6, r1, #9
 8000734:	4332      	orrs	r2, r6
 8000736:	01d9      	lsls	r1, r3, #7
 8000738:	d400      	bmi.n	800073c <__aeabi_dmul+0x31c>
 800073a:	e0b3      	b.n	80008a4 <__aeabi_dmul+0x484>
 800073c:	2601      	movs	r6, #1
 800073e:	0850      	lsrs	r0, r2, #1
 8000740:	4032      	ands	r2, r6
 8000742:	4302      	orrs	r2, r0
 8000744:	07de      	lsls	r6, r3, #31
 8000746:	4332      	orrs	r2, r6
 8000748:	085b      	lsrs	r3, r3, #1
 800074a:	4c22      	ldr	r4, [pc, #136]	; (80007d4 <__aeabi_dmul+0x3b4>)
 800074c:	4454      	add	r4, sl
 800074e:	2c00      	cmp	r4, #0
 8000750:	dd62      	ble.n	8000818 <__aeabi_dmul+0x3f8>
 8000752:	0751      	lsls	r1, r2, #29
 8000754:	d009      	beq.n	800076a <__aeabi_dmul+0x34a>
 8000756:	200f      	movs	r0, #15
 8000758:	4010      	ands	r0, r2
 800075a:	2804      	cmp	r0, #4
 800075c:	d005      	beq.n	800076a <__aeabi_dmul+0x34a>
 800075e:	1d10      	adds	r0, r2, #4
 8000760:	4290      	cmp	r0, r2
 8000762:	4192      	sbcs	r2, r2
 8000764:	4252      	negs	r2, r2
 8000766:	189b      	adds	r3, r3, r2
 8000768:	0002      	movs	r2, r0
 800076a:	01d9      	lsls	r1, r3, #7
 800076c:	d504      	bpl.n	8000778 <__aeabi_dmul+0x358>
 800076e:	2480      	movs	r4, #128	; 0x80
 8000770:	4819      	ldr	r0, [pc, #100]	; (80007d8 <__aeabi_dmul+0x3b8>)
 8000772:	00e4      	lsls	r4, r4, #3
 8000774:	4003      	ands	r3, r0
 8000776:	4454      	add	r4, sl
 8000778:	4818      	ldr	r0, [pc, #96]	; (80007dc <__aeabi_dmul+0x3bc>)
 800077a:	4284      	cmp	r4, r0
 800077c:	dd00      	ble.n	8000780 <__aeabi_dmul+0x360>
 800077e:	e727      	b.n	80005d0 <__aeabi_dmul+0x1b0>
 8000780:	075e      	lsls	r6, r3, #29
 8000782:	025b      	lsls	r3, r3, #9
 8000784:	08d2      	lsrs	r2, r2, #3
 8000786:	0b1f      	lsrs	r7, r3, #12
 8000788:	0563      	lsls	r3, r4, #21
 800078a:	4316      	orrs	r6, r2
 800078c:	0d5b      	lsrs	r3, r3, #21
 800078e:	e6b2      	b.n	80004f6 <__aeabi_dmul+0xd6>
 8000790:	2300      	movs	r3, #0
 8000792:	4699      	mov	r9, r3
 8000794:	3301      	adds	r3, #1
 8000796:	2704      	movs	r7, #4
 8000798:	2600      	movs	r6, #0
 800079a:	469b      	mov	fp, r3
 800079c:	e664      	b.n	8000468 <__aeabi_dmul+0x48>
 800079e:	2303      	movs	r3, #3
 80007a0:	9701      	str	r7, [sp, #4]
 80007a2:	4681      	mov	r9, r0
 80007a4:	270c      	movs	r7, #12
 80007a6:	469b      	mov	fp, r3
 80007a8:	e65e      	b.n	8000468 <__aeabi_dmul+0x48>
 80007aa:	2201      	movs	r2, #1
 80007ac:	2001      	movs	r0, #1
 80007ae:	4317      	orrs	r7, r2
 80007b0:	2200      	movs	r2, #0
 80007b2:	e676      	b.n	80004a2 <__aeabi_dmul+0x82>
 80007b4:	2303      	movs	r3, #3
 80007b6:	2003      	movs	r0, #3
 80007b8:	431f      	orrs	r7, r3
 80007ba:	4643      	mov	r3, r8
 80007bc:	e671      	b.n	80004a2 <__aeabi_dmul+0x82>
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	000007ff 	.word	0x000007ff
 80007c4:	fffffc01 	.word	0xfffffc01
 80007c8:	08002738 	.word	0x08002738
 80007cc:	800fffff 	.word	0x800fffff
 80007d0:	fffffc0d 	.word	0xfffffc0d
 80007d4:	000003ff 	.word	0x000003ff
 80007d8:	feffffff 	.word	0xfeffffff
 80007dc:	000007fe 	.word	0x000007fe
 80007e0:	2300      	movs	r3, #0
 80007e2:	2780      	movs	r7, #128	; 0x80
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	033f      	lsls	r7, r7, #12
 80007e8:	2600      	movs	r6, #0
 80007ea:	4b43      	ldr	r3, [pc, #268]	; (80008f8 <__aeabi_dmul+0x4d8>)
 80007ec:	e683      	b.n	80004f6 <__aeabi_dmul+0xd6>
 80007ee:	9b01      	ldr	r3, [sp, #4]
 80007f0:	0032      	movs	r2, r6
 80007f2:	46a4      	mov	ip, r4
 80007f4:	4658      	mov	r0, fp
 80007f6:	e670      	b.n	80004da <__aeabi_dmul+0xba>
 80007f8:	46ac      	mov	ip, r5
 80007fa:	e66e      	b.n	80004da <__aeabi_dmul+0xba>
 80007fc:	2780      	movs	r7, #128	; 0x80
 80007fe:	9901      	ldr	r1, [sp, #4]
 8000800:	033f      	lsls	r7, r7, #12
 8000802:	4239      	tst	r1, r7
 8000804:	d02d      	beq.n	8000862 <__aeabi_dmul+0x442>
 8000806:	423b      	tst	r3, r7
 8000808:	d12b      	bne.n	8000862 <__aeabi_dmul+0x442>
 800080a:	431f      	orrs	r7, r3
 800080c:	033f      	lsls	r7, r7, #12
 800080e:	0b3f      	lsrs	r7, r7, #12
 8000810:	9500      	str	r5, [sp, #0]
 8000812:	0016      	movs	r6, r2
 8000814:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <__aeabi_dmul+0x4d8>)
 8000816:	e66e      	b.n	80004f6 <__aeabi_dmul+0xd6>
 8000818:	2501      	movs	r5, #1
 800081a:	1b2d      	subs	r5, r5, r4
 800081c:	2d38      	cmp	r5, #56	; 0x38
 800081e:	dd00      	ble.n	8000822 <__aeabi_dmul+0x402>
 8000820:	e666      	b.n	80004f0 <__aeabi_dmul+0xd0>
 8000822:	2d1f      	cmp	r5, #31
 8000824:	dc40      	bgt.n	80008a8 <__aeabi_dmul+0x488>
 8000826:	4835      	ldr	r0, [pc, #212]	; (80008fc <__aeabi_dmul+0x4dc>)
 8000828:	001c      	movs	r4, r3
 800082a:	4450      	add	r0, sl
 800082c:	0016      	movs	r6, r2
 800082e:	4082      	lsls	r2, r0
 8000830:	4084      	lsls	r4, r0
 8000832:	40ee      	lsrs	r6, r5
 8000834:	1e50      	subs	r0, r2, #1
 8000836:	4182      	sbcs	r2, r0
 8000838:	4334      	orrs	r4, r6
 800083a:	4314      	orrs	r4, r2
 800083c:	40eb      	lsrs	r3, r5
 800083e:	0762      	lsls	r2, r4, #29
 8000840:	d009      	beq.n	8000856 <__aeabi_dmul+0x436>
 8000842:	220f      	movs	r2, #15
 8000844:	4022      	ands	r2, r4
 8000846:	2a04      	cmp	r2, #4
 8000848:	d005      	beq.n	8000856 <__aeabi_dmul+0x436>
 800084a:	0022      	movs	r2, r4
 800084c:	1d14      	adds	r4, r2, #4
 800084e:	4294      	cmp	r4, r2
 8000850:	4180      	sbcs	r0, r0
 8000852:	4240      	negs	r0, r0
 8000854:	181b      	adds	r3, r3, r0
 8000856:	021a      	lsls	r2, r3, #8
 8000858:	d53e      	bpl.n	80008d8 <__aeabi_dmul+0x4b8>
 800085a:	2301      	movs	r3, #1
 800085c:	2700      	movs	r7, #0
 800085e:	2600      	movs	r6, #0
 8000860:	e649      	b.n	80004f6 <__aeabi_dmul+0xd6>
 8000862:	2780      	movs	r7, #128	; 0x80
 8000864:	9b01      	ldr	r3, [sp, #4]
 8000866:	033f      	lsls	r7, r7, #12
 8000868:	431f      	orrs	r7, r3
 800086a:	033f      	lsls	r7, r7, #12
 800086c:	0b3f      	lsrs	r7, r7, #12
 800086e:	9400      	str	r4, [sp, #0]
 8000870:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <__aeabi_dmul+0x4d8>)
 8000872:	e640      	b.n	80004f6 <__aeabi_dmul+0xd6>
 8000874:	0003      	movs	r3, r0
 8000876:	465a      	mov	r2, fp
 8000878:	3b28      	subs	r3, #40	; 0x28
 800087a:	409a      	lsls	r2, r3
 800087c:	2600      	movs	r6, #0
 800087e:	9201      	str	r2, [sp, #4]
 8000880:	e66d      	b.n	800055e <__aeabi_dmul+0x13e>
 8000882:	4658      	mov	r0, fp
 8000884:	f000 f8f4 	bl	8000a70 <__clzsi2>
 8000888:	3020      	adds	r0, #32
 800088a:	e657      	b.n	800053c <__aeabi_dmul+0x11c>
 800088c:	0003      	movs	r3, r0
 800088e:	4652      	mov	r2, sl
 8000890:	3b28      	subs	r3, #40	; 0x28
 8000892:	409a      	lsls	r2, r3
 8000894:	0013      	movs	r3, r2
 8000896:	2200      	movs	r2, #0
 8000898:	e693      	b.n	80005c2 <__aeabi_dmul+0x1a2>
 800089a:	4650      	mov	r0, sl
 800089c:	f000 f8e8 	bl	8000a70 <__clzsi2>
 80008a0:	3020      	adds	r0, #32
 80008a2:	e67b      	b.n	800059c <__aeabi_dmul+0x17c>
 80008a4:	46ca      	mov	sl, r9
 80008a6:	e750      	b.n	800074a <__aeabi_dmul+0x32a>
 80008a8:	201f      	movs	r0, #31
 80008aa:	001e      	movs	r6, r3
 80008ac:	4240      	negs	r0, r0
 80008ae:	1b04      	subs	r4, r0, r4
 80008b0:	40e6      	lsrs	r6, r4
 80008b2:	2d20      	cmp	r5, #32
 80008b4:	d003      	beq.n	80008be <__aeabi_dmul+0x49e>
 80008b6:	4c12      	ldr	r4, [pc, #72]	; (8000900 <__aeabi_dmul+0x4e0>)
 80008b8:	4454      	add	r4, sl
 80008ba:	40a3      	lsls	r3, r4
 80008bc:	431a      	orrs	r2, r3
 80008be:	1e50      	subs	r0, r2, #1
 80008c0:	4182      	sbcs	r2, r0
 80008c2:	4332      	orrs	r2, r6
 80008c4:	2607      	movs	r6, #7
 80008c6:	2700      	movs	r7, #0
 80008c8:	4016      	ands	r6, r2
 80008ca:	d009      	beq.n	80008e0 <__aeabi_dmul+0x4c0>
 80008cc:	200f      	movs	r0, #15
 80008ce:	2300      	movs	r3, #0
 80008d0:	4010      	ands	r0, r2
 80008d2:	0014      	movs	r4, r2
 80008d4:	2804      	cmp	r0, #4
 80008d6:	d1b9      	bne.n	800084c <__aeabi_dmul+0x42c>
 80008d8:	0022      	movs	r2, r4
 80008da:	075e      	lsls	r6, r3, #29
 80008dc:	025b      	lsls	r3, r3, #9
 80008de:	0b1f      	lsrs	r7, r3, #12
 80008e0:	08d2      	lsrs	r2, r2, #3
 80008e2:	4316      	orrs	r6, r2
 80008e4:	2300      	movs	r3, #0
 80008e6:	e606      	b.n	80004f6 <__aeabi_dmul+0xd6>
 80008e8:	2780      	movs	r7, #128	; 0x80
 80008ea:	033f      	lsls	r7, r7, #12
 80008ec:	431f      	orrs	r7, r3
 80008ee:	033f      	lsls	r7, r7, #12
 80008f0:	0b3f      	lsrs	r7, r7, #12
 80008f2:	0016      	movs	r6, r2
 80008f4:	4b00      	ldr	r3, [pc, #0]	; (80008f8 <__aeabi_dmul+0x4d8>)
 80008f6:	e5fe      	b.n	80004f6 <__aeabi_dmul+0xd6>
 80008f8:	000007ff 	.word	0x000007ff
 80008fc:	0000041e 	.word	0x0000041e
 8000900:	0000043e 	.word	0x0000043e

08000904 <__aeabi_ui2d>:
 8000904:	b510      	push	{r4, lr}
 8000906:	1e04      	subs	r4, r0, #0
 8000908:	d025      	beq.n	8000956 <__aeabi_ui2d+0x52>
 800090a:	f000 f8b1 	bl	8000a70 <__clzsi2>
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <__aeabi_ui2d+0x5c>)
 8000910:	1a1b      	subs	r3, r3, r0
 8000912:	055b      	lsls	r3, r3, #21
 8000914:	0d5b      	lsrs	r3, r3, #21
 8000916:	280a      	cmp	r0, #10
 8000918:	dd12      	ble.n	8000940 <__aeabi_ui2d+0x3c>
 800091a:	380b      	subs	r0, #11
 800091c:	4084      	lsls	r4, r0
 800091e:	2200      	movs	r2, #0
 8000920:	0324      	lsls	r4, r4, #12
 8000922:	0b24      	lsrs	r4, r4, #12
 8000924:	2100      	movs	r1, #0
 8000926:	0010      	movs	r0, r2
 8000928:	0324      	lsls	r4, r4, #12
 800092a:	0d0a      	lsrs	r2, r1, #20
 800092c:	0b24      	lsrs	r4, r4, #12
 800092e:	0512      	lsls	r2, r2, #20
 8000930:	4322      	orrs	r2, r4
 8000932:	4c0c      	ldr	r4, [pc, #48]	; (8000964 <__aeabi_ui2d+0x60>)
 8000934:	051b      	lsls	r3, r3, #20
 8000936:	4022      	ands	r2, r4
 8000938:	4313      	orrs	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	0859      	lsrs	r1, r3, #1
 800093e:	bd10      	pop	{r4, pc}
 8000940:	0002      	movs	r2, r0
 8000942:	0021      	movs	r1, r4
 8000944:	3215      	adds	r2, #21
 8000946:	4091      	lsls	r1, r2
 8000948:	000a      	movs	r2, r1
 800094a:	210b      	movs	r1, #11
 800094c:	1a08      	subs	r0, r1, r0
 800094e:	40c4      	lsrs	r4, r0
 8000950:	0324      	lsls	r4, r4, #12
 8000952:	0b24      	lsrs	r4, r4, #12
 8000954:	e7e6      	b.n	8000924 <__aeabi_ui2d+0x20>
 8000956:	2300      	movs	r3, #0
 8000958:	2400      	movs	r4, #0
 800095a:	2200      	movs	r2, #0
 800095c:	e7e2      	b.n	8000924 <__aeabi_ui2d+0x20>
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	0000041e 	.word	0x0000041e
 8000964:	800fffff 	.word	0x800fffff

08000968 <__aeabi_d2f>:
 8000968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800096a:	004c      	lsls	r4, r1, #1
 800096c:	0d64      	lsrs	r4, r4, #21
 800096e:	030b      	lsls	r3, r1, #12
 8000970:	1c62      	adds	r2, r4, #1
 8000972:	0a5b      	lsrs	r3, r3, #9
 8000974:	0f46      	lsrs	r6, r0, #29
 8000976:	0552      	lsls	r2, r2, #21
 8000978:	0fc9      	lsrs	r1, r1, #31
 800097a:	431e      	orrs	r6, r3
 800097c:	00c5      	lsls	r5, r0, #3
 800097e:	0d52      	lsrs	r2, r2, #21
 8000980:	2a01      	cmp	r2, #1
 8000982:	dd29      	ble.n	80009d8 <__aeabi_d2f+0x70>
 8000984:	4b37      	ldr	r3, [pc, #220]	; (8000a64 <__aeabi_d2f+0xfc>)
 8000986:	18e7      	adds	r7, r4, r3
 8000988:	2ffe      	cmp	r7, #254	; 0xfe
 800098a:	dc1c      	bgt.n	80009c6 <__aeabi_d2f+0x5e>
 800098c:	2f00      	cmp	r7, #0
 800098e:	dd3b      	ble.n	8000a08 <__aeabi_d2f+0xa0>
 8000990:	0180      	lsls	r0, r0, #6
 8000992:	1e43      	subs	r3, r0, #1
 8000994:	4198      	sbcs	r0, r3
 8000996:	2207      	movs	r2, #7
 8000998:	00f3      	lsls	r3, r6, #3
 800099a:	0f6d      	lsrs	r5, r5, #29
 800099c:	4303      	orrs	r3, r0
 800099e:	432b      	orrs	r3, r5
 80009a0:	401a      	ands	r2, r3
 80009a2:	2a00      	cmp	r2, #0
 80009a4:	d004      	beq.n	80009b0 <__aeabi_d2f+0x48>
 80009a6:	220f      	movs	r2, #15
 80009a8:	401a      	ands	r2, r3
 80009aa:	2a04      	cmp	r2, #4
 80009ac:	d000      	beq.n	80009b0 <__aeabi_d2f+0x48>
 80009ae:	3304      	adds	r3, #4
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	04d2      	lsls	r2, r2, #19
 80009b4:	401a      	ands	r2, r3
 80009b6:	d024      	beq.n	8000a02 <__aeabi_d2f+0x9a>
 80009b8:	3701      	adds	r7, #1
 80009ba:	b2fa      	uxtb	r2, r7
 80009bc:	2fff      	cmp	r7, #255	; 0xff
 80009be:	d002      	beq.n	80009c6 <__aeabi_d2f+0x5e>
 80009c0:	019b      	lsls	r3, r3, #6
 80009c2:	0a58      	lsrs	r0, r3, #9
 80009c4:	e001      	b.n	80009ca <__aeabi_d2f+0x62>
 80009c6:	22ff      	movs	r2, #255	; 0xff
 80009c8:	2000      	movs	r0, #0
 80009ca:	0240      	lsls	r0, r0, #9
 80009cc:	05d2      	lsls	r2, r2, #23
 80009ce:	0a40      	lsrs	r0, r0, #9
 80009d0:	07c9      	lsls	r1, r1, #31
 80009d2:	4310      	orrs	r0, r2
 80009d4:	4308      	orrs	r0, r1
 80009d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009d8:	4335      	orrs	r5, r6
 80009da:	2c00      	cmp	r4, #0
 80009dc:	d104      	bne.n	80009e8 <__aeabi_d2f+0x80>
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_d2f+0x90>
 80009e2:	2200      	movs	r2, #0
 80009e4:	2000      	movs	r0, #0
 80009e6:	e7f0      	b.n	80009ca <__aeabi_d2f+0x62>
 80009e8:	2d00      	cmp	r5, #0
 80009ea:	d0ec      	beq.n	80009c6 <__aeabi_d2f+0x5e>
 80009ec:	2080      	movs	r0, #128	; 0x80
 80009ee:	03c0      	lsls	r0, r0, #15
 80009f0:	4330      	orrs	r0, r6
 80009f2:	22ff      	movs	r2, #255	; 0xff
 80009f4:	e7e9      	b.n	80009ca <__aeabi_d2f+0x62>
 80009f6:	2400      	movs	r4, #0
 80009f8:	2300      	movs	r3, #0
 80009fa:	025b      	lsls	r3, r3, #9
 80009fc:	0a58      	lsrs	r0, r3, #9
 80009fe:	b2e2      	uxtb	r2, r4
 8000a00:	e7e3      	b.n	80009ca <__aeabi_d2f+0x62>
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	003c      	movs	r4, r7
 8000a06:	e7f8      	b.n	80009fa <__aeabi_d2f+0x92>
 8000a08:	003b      	movs	r3, r7
 8000a0a:	3317      	adds	r3, #23
 8000a0c:	dbf3      	blt.n	80009f6 <__aeabi_d2f+0x8e>
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	041b      	lsls	r3, r3, #16
 8000a12:	4333      	orrs	r3, r6
 8000a14:	261e      	movs	r6, #30
 8000a16:	1bf6      	subs	r6, r6, r7
 8000a18:	2e1f      	cmp	r6, #31
 8000a1a:	dd14      	ble.n	8000a46 <__aeabi_d2f+0xde>
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	4252      	negs	r2, r2
 8000a20:	1bd7      	subs	r7, r2, r7
 8000a22:	001a      	movs	r2, r3
 8000a24:	40fa      	lsrs	r2, r7
 8000a26:	0017      	movs	r7, r2
 8000a28:	2e20      	cmp	r6, #32
 8000a2a:	d004      	beq.n	8000a36 <__aeabi_d2f+0xce>
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <__aeabi_d2f+0x100>)
 8000a2e:	4694      	mov	ip, r2
 8000a30:	4464      	add	r4, ip
 8000a32:	40a3      	lsls	r3, r4
 8000a34:	431d      	orrs	r5, r3
 8000a36:	002b      	movs	r3, r5
 8000a38:	1e5d      	subs	r5, r3, #1
 8000a3a:	41ab      	sbcs	r3, r5
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	433b      	orrs	r3, r7
 8000a40:	401a      	ands	r2, r3
 8000a42:	2700      	movs	r7, #0
 8000a44:	e7ad      	b.n	80009a2 <__aeabi_d2f+0x3a>
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <__aeabi_d2f+0x104>)
 8000a48:	0028      	movs	r0, r5
 8000a4a:	18a2      	adds	r2, r4, r2
 8000a4c:	4095      	lsls	r5, r2
 8000a4e:	4093      	lsls	r3, r2
 8000a50:	1e6c      	subs	r4, r5, #1
 8000a52:	41a5      	sbcs	r5, r4
 8000a54:	40f0      	lsrs	r0, r6
 8000a56:	2207      	movs	r2, #7
 8000a58:	432b      	orrs	r3, r5
 8000a5a:	4303      	orrs	r3, r0
 8000a5c:	401a      	ands	r2, r3
 8000a5e:	2700      	movs	r7, #0
 8000a60:	e79f      	b.n	80009a2 <__aeabi_d2f+0x3a>
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	fffffc80 	.word	0xfffffc80
 8000a68:	fffffca2 	.word	0xfffffca2
 8000a6c:	fffffc82 	.word	0xfffffc82

08000a70 <__clzsi2>:
 8000a70:	211c      	movs	r1, #28
 8000a72:	2301      	movs	r3, #1
 8000a74:	041b      	lsls	r3, r3, #16
 8000a76:	4298      	cmp	r0, r3
 8000a78:	d301      	bcc.n	8000a7e <__clzsi2+0xe>
 8000a7a:	0c00      	lsrs	r0, r0, #16
 8000a7c:	3910      	subs	r1, #16
 8000a7e:	0a1b      	lsrs	r3, r3, #8
 8000a80:	4298      	cmp	r0, r3
 8000a82:	d301      	bcc.n	8000a88 <__clzsi2+0x18>
 8000a84:	0a00      	lsrs	r0, r0, #8
 8000a86:	3908      	subs	r1, #8
 8000a88:	091b      	lsrs	r3, r3, #4
 8000a8a:	4298      	cmp	r0, r3
 8000a8c:	d301      	bcc.n	8000a92 <__clzsi2+0x22>
 8000a8e:	0900      	lsrs	r0, r0, #4
 8000a90:	3904      	subs	r1, #4
 8000a92:	a202      	add	r2, pc, #8	; (adr r2, 8000a9c <__clzsi2+0x2c>)
 8000a94:	5c10      	ldrb	r0, [r2, r0]
 8000a96:	1840      	adds	r0, r0, r1
 8000a98:	4770      	bx	lr
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	02020304 	.word	0x02020304
 8000aa0:	01010101 	.word	0x01010101
	...

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b5b0      	push	{r4, r5, r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab0:	f000 fa50 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab4:	f000 f8a6 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab8:	f000 f94c 	bl	8000d54 <MX_GPIO_Init>
  MX_ADC_Init();
 8000abc:	f000 f8f0 	bl	8000ca0 <MX_ADC_Init>
	  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
	  	  HAL_Delay(1000);

	  	  ////////////////////////////////////////////////////
*/
	  HAL_ADC_Start(&hadc);
 8000ac0:	4b48      	ldr	r3, [pc, #288]	; (8000be4 <main+0x138>)
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 fc0c 	bl	80012e0 <HAL_ADC_Start>

	  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000ac8:	4b46      	ldr	r3, [pc, #280]	; (8000be4 <main+0x138>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 fc08 	bl	80012e0 <HAL_ADC_Start>
	  {
	      //Start Conversation Error
	      // Error_Handler();
	  }

	  if (HAL_ADC_PollForConversion(&hadc, 5000) != HAL_OK)
 8000ad0:	4a45      	ldr	r2, [pc, #276]	; (8000be8 <main+0x13c>)
 8000ad2:	4b44      	ldr	r3, [pc, #272]	; (8000be4 <main+0x138>)
 8000ad4:	0011      	movs	r1, r2
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 fc96 	bl	8001408 <HAL_ADC_PollForConversion>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d003      	beq.n	8000ae8 <main+0x3c>
	  {
	      // End Of Conversion flag not set on time
	      // Error_Handler();
	      adcval=-1;
 8000ae0:	4b42      	ldr	r3, [pc, #264]	; (8000bec <main+0x140>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4252      	negs	r2, r2
 8000ae6:	601a      	str	r2, [r3, #0]
	  }

	  if (HAL_ADC_PollForConversion(&hadc, 5000) == HAL_OK)
 8000ae8:	4a3f      	ldr	r2, [pc, #252]	; (8000be8 <main+0x13c>)
 8000aea:	4b3e      	ldr	r3, [pc, #248]	; (8000be4 <main+0x138>)
 8000aec:	0011      	movs	r1, r2
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 fc8a 	bl	8001408 <HAL_ADC_PollForConversion>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d106      	bne.n	8000b06 <main+0x5a>
	  {
	      adcval = HAL_ADC_GetValue(&hadc);
 8000af8:	4b3a      	ldr	r3, [pc, #232]	; (8000be4 <main+0x138>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 fd16 	bl	800152c <HAL_ADC_GetValue>
 8000b00:	0002      	movs	r2, r0
 8000b02:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <main+0x140>)
 8000b04:	601a      	str	r2, [r3, #0]
	  }




	  temp = (adcval)*(0.04375); // adcval*500/2^12
 8000b06:	4b39      	ldr	r3, [pc, #228]	; (8000bec <main+0x140>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff fefa 	bl	8000904 <__aeabi_ui2d>
 8000b10:	4a37      	ldr	r2, [pc, #220]	; (8000bf0 <main+0x144>)
 8000b12:	4b38      	ldr	r3, [pc, #224]	; (8000bf4 <main+0x148>)
 8000b14:	f7ff fc84 	bl	8000420 <__aeabi_dmul>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	000c      	movs	r4, r1
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	0021      	movs	r1, r4
 8000b20:	f7ff ff22 	bl	8000968 <__aeabi_d2f>
 8000b24:	1c02      	adds	r2, r0, #0
 8000b26:	4b34      	ldr	r3, [pc, #208]	; (8000bf8 <main+0x14c>)
 8000b28:	601a      	str	r2, [r3, #0]

	  	  if(temp>=high){
 8000b2a:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <main+0x14c>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <main+0x150>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	1c19      	adds	r1, r3, #0
 8000b34:	1c10      	adds	r0, r2, #0
 8000b36:	f7ff fba3 	bl	8000280 <__aeabi_fcmpge>
 8000b3a:	1e03      	subs	r3, r0, #0
 8000b3c:	d018      	beq.n	8000b70 <main+0xc4>

	  	  		  HAL_Delay(500);
 8000b3e:	23fa      	movs	r3, #250	; 0xfa
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 fa6a 	bl	800101c <HAL_Delay>
	  	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000b48:	2390      	movs	r3, #144	; 0x90
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2160      	movs	r1, #96	; 0x60
 8000b50:	0018      	movs	r0, r3
 8000b52:	f001 f93d 	bl	8001dd0 <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8000b56:	2390      	movs	r3, #144	; 0x90
 8000b58:	05db      	lsls	r3, r3, #23
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	210c      	movs	r1, #12
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f001 f936 	bl	8001dd0 <HAL_GPIO_WritePin>
	  	  		  HAL_Delay(900);
 8000b64:	23e1      	movs	r3, #225	; 0xe1
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f000 fa57 	bl	800101c <HAL_Delay>
 8000b6e:	e033      	b.n	8000bd8 <main+0x12c>

	  	  	  } else if(temp<=low){
 8000b70:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <main+0x14c>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <main+0x154>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	1c19      	adds	r1, r3, #0
 8000b7a:	1c10      	adds	r0, r2, #0
 8000b7c:	f7ff fb6c 	bl	8000258 <__aeabi_fcmple>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d018      	beq.n	8000bb6 <main+0x10a>
	  	  		  HAL_Delay(500);
 8000b84:	23fa      	movs	r3, #250	; 0xfa
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f000 fa47 	bl	800101c <HAL_Delay>
	  	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000b8e:	2390      	movs	r3, #144	; 0x90
 8000b90:	05db      	lsls	r3, r3, #23
 8000b92:	2200      	movs	r2, #0
 8000b94:	210c      	movs	r1, #12
 8000b96:	0018      	movs	r0, r3
 8000b98:	f001 f91a 	bl	8001dd0 <HAL_GPIO_WritePin>
	  	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_SET);
 8000b9c:	2390      	movs	r3, #144	; 0x90
 8000b9e:	05db      	lsls	r3, r3, #23
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2160      	movs	r1, #96	; 0x60
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f001 f913 	bl	8001dd0 <HAL_GPIO_WritePin>
	  	  		  HAL_Delay(500);
 8000baa:	23fa      	movs	r3, #250	; 0xfa
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 fa34 	bl	800101c <HAL_Delay>
 8000bb4:	e010      	b.n	8000bd8 <main+0x12c>

	  	  	  } else{

	  	  		  HAL_Delay(500);
 8000bb6:	23fa      	movs	r3, #250	; 0xfa
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f000 fa2e 	bl	800101c <HAL_Delay>
	  	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000bc0:	2390      	movs	r3, #144	; 0x90
 8000bc2:	05db      	lsls	r3, r3, #23
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	217c      	movs	r1, #124	; 0x7c
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f001 f901 	bl	8001dd0 <HAL_GPIO_WritePin>
	  	  		  HAL_Delay(500);
 8000bce:	23fa      	movs	r3, #250	; 0xfa
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 fa22 	bl	800101c <HAL_Delay>

	  	  	  }

		  HAL_ADC_Stop(&hadc);
 8000bd8:	4b02      	ldr	r3, [pc, #8]	; (8000be4 <main+0x138>)
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f000 fbd4 	bl	8001388 <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc);
 8000be0:	e76e      	b.n	8000ac0 <main+0x14>
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	20000034 	.word	0x20000034
 8000be8:	00001388 	.word	0x00001388
 8000bec:	20000074 	.word	0x20000074
 8000bf0:	66666666 	.word	0x66666666
 8000bf4:	3fa66666 	.word	0x3fa66666
 8000bf8:	20000030 	.word	0x20000030
 8000bfc:	20000004 	.word	0x20000004
 8000c00:	20000000 	.word	0x20000000

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b091      	sub	sp, #68	; 0x44
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	2410      	movs	r4, #16
 8000c0c:	193b      	adds	r3, r7, r4
 8000c0e:	0018      	movs	r0, r3
 8000c10:	2330      	movs	r3, #48	; 0x30
 8000c12:	001a      	movs	r2, r3
 8000c14:	2100      	movs	r1, #0
 8000c16:	f001 fd6b 	bl	80026f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1a:	003b      	movs	r3, r7
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	2310      	movs	r3, #16
 8000c20:	001a      	movs	r2, r3
 8000c22:	2100      	movs	r1, #0
 8000c24:	f001 fd64 	bl	80026f0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8000c28:	0021      	movs	r1, r4
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2211      	movs	r2, #17
 8000c2e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2201      	movs	r2, #1
 8000c34:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2201      	movs	r2, #1
 8000c3a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2210      	movs	r2, #16
 8000c40:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2202      	movs	r2, #2
 8000c46:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2280      	movs	r2, #128	; 0x80
 8000c4c:	0252      	lsls	r2, r2, #9
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2280      	movs	r2, #128	; 0x80
 8000c54:	0352      	lsls	r2, r2, #13
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	0018      	movs	r0, r3
 8000c62:	f001 f8d3 	bl	8001e0c <HAL_RCC_OscConfig>
 8000c66:	1e03      	subs	r3, r0, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000c6a:	f000 f8bb 	bl	8000de4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	003b      	movs	r3, r7
 8000c70:	2207      	movs	r2, #7
 8000c72:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c74:	003b      	movs	r3, r7
 8000c76:	2202      	movs	r2, #2
 8000c78:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7a:	003b      	movs	r3, r7
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c80:	003b      	movs	r3, r7
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c86:	003b      	movs	r3, r7
 8000c88:	2101      	movs	r1, #1
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f001 fbda 	bl	8002444 <HAL_RCC_ClockConfig>
 8000c90:	1e03      	subs	r3, r0, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c94:	f000 f8a6 	bl	8000de4 <Error_Handler>
  }
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b011      	add	sp, #68	; 0x44
 8000c9e:	bd90      	pop	{r4, r7, pc}

08000ca0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	0018      	movs	r0, r3
 8000caa:	230c      	movs	r3, #12
 8000cac:	001a      	movs	r2, r3
 8000cae:	2100      	movs	r1, #0
 8000cb0:	f001 fd1e 	bl	80026f0 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <MX_ADC_Init+0xac>)
 8000cb6:	4a26      	ldr	r2, [pc, #152]	; (8000d50 <MX_ADC_Init+0xb0>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <MX_ADC_Init+0xac>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_ADC_Init+0xac>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_ADC_Init+0xac>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_ADC_Init+0xac>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <MX_ADC_Init+0xac>)
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_ADC_Init+0xac>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000cde:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <MX_ADC_Init+0xac>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000ce4:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_ADC_Init+0xac>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000cea:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <MX_ADC_Init+0xac>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_ADC_Init+0xac>)
 8000cf2:	22c2      	movs	r2, #194	; 0xc2
 8000cf4:	32ff      	adds	r2, #255	; 0xff
 8000cf6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_ADC_Init+0xac>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <MX_ADC_Init+0xac>)
 8000d00:	2224      	movs	r2, #36	; 0x24
 8000d02:	2100      	movs	r1, #0
 8000d04:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_ADC_Init+0xac>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_ADC_Init+0xac>)
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f000 f9a6 	bl	8001060 <HAL_ADC_Init>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d001      	beq.n	8000d1c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000d18:	f000 f864 	bl	8000de4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	0152      	lsls	r2, r2, #5
 8000d28:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d30:	1d3a      	adds	r2, r7, #4
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_ADC_Init+0xac>)
 8000d34:	0011      	movs	r1, r2
 8000d36:	0018      	movs	r0, r3
 8000d38:	f000 fc04 	bl	8001544 <HAL_ADC_ConfigChannel>
 8000d3c:	1e03      	subs	r3, r0, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000d40:	f000 f850 	bl	8000de4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b004      	add	sp, #16
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000034 	.word	0x20000034
 8000d50:	40012400 	.word	0x40012400

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	240c      	movs	r4, #12
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	0018      	movs	r0, r3
 8000d60:	2314      	movs	r3, #20
 8000d62:	001a      	movs	r2, r3
 8000d64:	2100      	movs	r1, #0
 8000d66:	f001 fcc3 	bl	80026f0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d6a:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <MX_GPIO_Init+0x8c>)
 8000d6c:	695a      	ldr	r2, [r3, #20]
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_GPIO_Init+0x8c>)
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	03c9      	lsls	r1, r1, #15
 8000d74:	430a      	orrs	r2, r1
 8000d76:	615a      	str	r2, [r3, #20]
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <MX_GPIO_Init+0x8c>)
 8000d7a:	695a      	ldr	r2, [r3, #20]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	03db      	lsls	r3, r3, #15
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <MX_GPIO_Init+0x8c>)
 8000d88:	695a      	ldr	r2, [r3, #20]
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_GPIO_Init+0x8c>)
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	0289      	lsls	r1, r1, #10
 8000d90:	430a      	orrs	r2, r1
 8000d92:	615a      	str	r2, [r3, #20]
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <MX_GPIO_Init+0x8c>)
 8000d96:	695a      	ldr	r2, [r3, #20]
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	029b      	lsls	r3, r3, #10
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8000da2:	2390      	movs	r3, #144	; 0x90
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	2201      	movs	r2, #1
 8000da8:	217c      	movs	r1, #124	; 0x7c
 8000daa:	0018      	movs	r0, r3
 8000dac:	f001 f810 	bl	8001dd0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_SET);

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 
                           PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8000db0:	0021      	movs	r1, r4
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	227c      	movs	r2, #124	; 0x7c
 8000db6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2201      	movs	r2, #1
 8000dbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	187a      	adds	r2, r7, r1
 8000dcc:	2390      	movs	r3, #144	; 0x90
 8000dce:	05db      	lsls	r3, r3, #23
 8000dd0:	0011      	movs	r1, r2
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f000 fe8c 	bl	8001af0 <HAL_GPIO_Init>

}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b009      	add	sp, #36	; 0x24
 8000dde:	bd90      	pop	{r4, r7, pc}
 8000de0:	40021000 	.word	0x40021000

08000de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_MspInit+0x44>)
 8000df8:	699a      	ldr	r2, [r3, #24]
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_MspInit+0x44>)
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	619a      	str	r2, [r3, #24]
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <HAL_MspInit+0x44>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	2201      	movs	r2, #1
 8000e08:	4013      	ands	r3, r2
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_MspInit+0x44>)
 8000e10:	69da      	ldr	r2, [r3, #28]
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_MspInit+0x44>)
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	0549      	lsls	r1, r1, #21
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	61da      	str	r2, [r3, #28]
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_MspInit+0x44>)
 8000e1e:	69da      	ldr	r2, [r3, #28]
 8000e20:	2380      	movs	r3, #128	; 0x80
 8000e22:	055b      	lsls	r3, r3, #21
 8000e24:	4013      	ands	r3, r2
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	40021000 	.word	0x40021000

08000e38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	2314      	movs	r3, #20
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	0018      	movs	r0, r3
 8000e46:	2314      	movs	r3, #20
 8000e48:	001a      	movs	r2, r3
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	f001 fc50 	bl	80026f0 <memset>
  if(hadc->Instance==ADC1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a19      	ldr	r2, [pc, #100]	; (8000ebc <HAL_ADC_MspInit+0x84>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d12c      	bne.n	8000eb4 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_ADC_MspInit+0x88>)
 8000e5c:	699a      	ldr	r2, [r3, #24]
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_ADC_MspInit+0x88>)
 8000e60:	2180      	movs	r1, #128	; 0x80
 8000e62:	0089      	lsls	r1, r1, #2
 8000e64:	430a      	orrs	r2, r1
 8000e66:	619a      	str	r2, [r3, #24]
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_ADC_MspInit+0x88>)
 8000e6a:	699a      	ldr	r2, [r3, #24]
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_ADC_MspInit+0x88>)
 8000e78:	695a      	ldr	r2, [r3, #20]
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_ADC_MspInit+0x88>)
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	0289      	lsls	r1, r1, #10
 8000e80:	430a      	orrs	r2, r1
 8000e82:	615a      	str	r2, [r3, #20]
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_ADC_MspInit+0x88>)
 8000e86:	695a      	ldr	r2, [r3, #20]
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	029b      	lsls	r3, r3, #10
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e92:	2114      	movs	r1, #20
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	187a      	adds	r2, r7, r1
 8000ea8:	2390      	movs	r3, #144	; 0x90
 8000eaa:	05db      	lsls	r3, r3, #23
 8000eac:	0011      	movs	r1, r2
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f000 fe1e 	bl	8001af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b00a      	add	sp, #40	; 0x28
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40012400 	.word	0x40012400
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eec:	f000 f87a 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f06:	490e      	ldr	r1, [pc, #56]	; (8000f40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <LoopForever+0xe>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f1c:	4c0b      	ldr	r4, [pc, #44]	; (8000f4c <LoopForever+0x16>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f2a:	f7ff ffe4 	bl	8000ef6 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f2e:	f001 fbbb 	bl	80026a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f32:	f7ff fdbb 	bl	8000aac <main>

08000f36 <LoopForever>:

LoopForever:
    b LoopForever
 8000f36:	e7fe      	b.n	8000f36 <LoopForever>
  ldr   r0, =_estack
 8000f38:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f44:	08002790 	.word	0x08002790
  ldr r2, =_sbss
 8000f48:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f4c:	2000007c 	.word	0x2000007c

08000f50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC1_IRQHandler>
	...

08000f54 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HAL_Init+0x24>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_Init+0x24>)
 8000f5e:	2110      	movs	r1, #16
 8000f60:	430a      	orrs	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f64:	2000      	movs	r0, #0
 8000f66:	f000 f809 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6a:	f7ff ff41 	bl	8000df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	0018      	movs	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	40022000 	.word	0x40022000

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000f86:	681c      	ldr	r4, [r3, #0]
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_InitTick+0x60>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	0019      	movs	r1, r3
 8000f8e:	23fa      	movs	r3, #250	; 0xfa
 8000f90:	0098      	lsls	r0, r3, #2
 8000f92:	f7ff f8b9 	bl	8000108 <__udivsi3>
 8000f96:	0003      	movs	r3, r0
 8000f98:	0019      	movs	r1, r3
 8000f9a:	0020      	movs	r0, r4
 8000f9c:	f7ff f8b4 	bl	8000108 <__udivsi3>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 fd97 	bl	8001ad6 <HAL_SYSTICK_Config>
 8000fa8:	1e03      	subs	r3, r0, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e00f      	b.n	8000fd0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d80b      	bhi.n	8000fce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	425b      	negs	r3, r3
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f000 fd74 	bl	8001aac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_InitTick+0x64>)
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b003      	add	sp, #12
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000010 	.word	0x20000010
 8000fe0:	2000000c 	.word	0x2000000c

08000fe4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <HAL_IncTick+0x1c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	001a      	movs	r2, r3
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_IncTick+0x20>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	18d2      	adds	r2, r2, r3
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_IncTick+0x20>)
 8000ff6:	601a      	str	r2, [r3, #0]
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	20000010 	.word	0x20000010
 8001004:	20000078 	.word	0x20000078

08001008 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b02      	ldr	r3, [pc, #8]	; (8001018 <HAL_GetTick+0x10>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	0018      	movs	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	20000078 	.word	0x20000078

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff fff0 	bl	8001008 <HAL_GetTick>
 8001028:	0003      	movs	r3, r0
 800102a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3301      	adds	r3, #1
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_Delay+0x40>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	001a      	movs	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	189b      	adds	r3, r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	f7ff ffe0 	bl	8001008 <HAL_GetTick>
 8001048:	0002      	movs	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	b004      	add	sp, #16
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000010 	.word	0x20000010

08001060 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	230f      	movs	r3, #15
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e125      	b.n	80012ca <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10a      	bne.n	800109c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2234      	movs	r2, #52	; 0x34
 8001090:	2100      	movs	r1, #0
 8001092:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	0018      	movs	r0, r3
 8001098:	f7ff fece 	bl	8000e38 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a0:	2210      	movs	r2, #16
 80010a2:	4013      	ands	r3, r2
 80010a4:	d000      	beq.n	80010a8 <HAL_ADC_Init+0x48>
 80010a6:	e103      	b.n	80012b0 <HAL_ADC_Init+0x250>
 80010a8:	230f      	movs	r3, #15
 80010aa:	18fb      	adds	r3, r7, r3
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d000      	beq.n	80010b4 <HAL_ADC_Init+0x54>
 80010b2:	e0fd      	b.n	80012b0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2204      	movs	r2, #4
 80010bc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80010be:	d000      	beq.n	80010c2 <HAL_ADC_Init+0x62>
 80010c0:	e0f6      	b.n	80012b0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c6:	4a83      	ldr	r2, [pc, #524]	; (80012d4 <HAL_ADC_Init+0x274>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	2202      	movs	r2, #2
 80010cc:	431a      	orrs	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	2203      	movs	r2, #3
 80010da:	4013      	ands	r3, r2
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d112      	bne.n	8001106 <HAL_ADC_Init+0xa6>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2201      	movs	r2, #1
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d009      	beq.n	8001102 <HAL_ADC_Init+0xa2>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	68da      	ldr	r2, [r3, #12]
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	401a      	ands	r2, r3
 80010fa:	2380      	movs	r3, #128	; 0x80
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	429a      	cmp	r2, r3
 8001100:	d101      	bne.n	8001106 <HAL_ADC_Init+0xa6>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <HAL_ADC_Init+0xa8>
 8001106:	2300      	movs	r3, #0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d116      	bne.n	800113a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	2218      	movs	r2, #24
 8001114:	4393      	bics	r3, r2
 8001116:	0019      	movs	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	0899      	lsrs	r1, r3, #2
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4964      	ldr	r1, [pc, #400]	; (80012d8 <HAL_ADC_Init+0x278>)
 8001146:	400a      	ands	r2, r1
 8001148:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7e1b      	ldrb	r3, [r3, #24]
 800114e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7e5b      	ldrb	r3, [r3, #25]
 8001154:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001156:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7e9b      	ldrb	r3, [r3, #26]
 800115c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800115e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	2b01      	cmp	r3, #1
 8001166:	d002      	beq.n	800116e <HAL_ADC_Init+0x10e>
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	015b      	lsls	r3, r3, #5
 800116c:	e000      	b.n	8001170 <HAL_ADC_Init+0x110>
 800116e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001170:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001176:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d101      	bne.n	8001184 <HAL_ADC_Init+0x124>
 8001180:	2304      	movs	r3, #4
 8001182:	e000      	b.n	8001186 <HAL_ADC_Init+0x126>
 8001184:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001186:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2124      	movs	r1, #36	; 0x24
 800118c:	5c5b      	ldrb	r3, [r3, r1]
 800118e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001190:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	4313      	orrs	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7edb      	ldrb	r3, [r3, #27]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d115      	bne.n	80011cc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7e9b      	ldrb	r3, [r3, #26]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d105      	bne.n	80011b4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2280      	movs	r2, #128	; 0x80
 80011ac:	0252      	lsls	r2, r2, #9
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	e00b      	b.n	80011cc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b8:	2220      	movs	r2, #32
 80011ba:	431a      	orrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c4:	2201      	movs	r2, #1
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69da      	ldr	r2, [r3, #28]
 80011d0:	23c2      	movs	r3, #194	; 0xc2
 80011d2:	33ff      	adds	r3, #255	; 0xff
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d007      	beq.n	80011e8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80011e0:	4313      	orrs	r3, r2
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68d9      	ldr	r1, [r3, #12]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	055b      	lsls	r3, r3, #21
 8001200:	429a      	cmp	r2, r3
 8001202:	d01b      	beq.n	800123c <HAL_ADC_Init+0x1dc>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001208:	2b01      	cmp	r3, #1
 800120a:	d017      	beq.n	800123c <HAL_ADC_Init+0x1dc>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001210:	2b02      	cmp	r3, #2
 8001212:	d013      	beq.n	800123c <HAL_ADC_Init+0x1dc>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001218:	2b03      	cmp	r3, #3
 800121a:	d00f      	beq.n	800123c <HAL_ADC_Init+0x1dc>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001220:	2b04      	cmp	r3, #4
 8001222:	d00b      	beq.n	800123c <HAL_ADC_Init+0x1dc>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001228:	2b05      	cmp	r3, #5
 800122a:	d007      	beq.n	800123c <HAL_ADC_Init+0x1dc>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001230:	2b06      	cmp	r3, #6
 8001232:	d003      	beq.n	800123c <HAL_ADC_Init+0x1dc>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001238:	2b07      	cmp	r3, #7
 800123a:	d112      	bne.n	8001262 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	695a      	ldr	r2, [r3, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2107      	movs	r1, #7
 8001248:	438a      	bics	r2, r1
 800124a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6959      	ldr	r1, [r3, #20]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001256:	2207      	movs	r2, #7
 8001258:	401a      	ands	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <HAL_ADC_Init+0x27c>)
 800126a:	4013      	ands	r3, r2
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	429a      	cmp	r2, r3
 8001270:	d10b      	bne.n	800128a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127c:	2203      	movs	r2, #3
 800127e:	4393      	bics	r3, r2
 8001280:	2201      	movs	r2, #1
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001288:	e01c      	b.n	80012c4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128e:	2212      	movs	r2, #18
 8001290:	4393      	bics	r3, r2
 8001292:	2210      	movs	r2, #16
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800129e:	2201      	movs	r2, #1
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80012a6:	230f      	movs	r3, #15
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80012ae:	e009      	b.n	80012c4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b4:	2210      	movs	r2, #16
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80012bc:	230f      	movs	r3, #15
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012c4:	230f      	movs	r3, #15
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	781b      	ldrb	r3, [r3, #0]
}
 80012ca:	0018      	movs	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b004      	add	sp, #16
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	fffffefd 	.word	0xfffffefd
 80012d8:	fffe0219 	.word	0xfffe0219
 80012dc:	833fffe7 	.word	0x833fffe7

080012e0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e8:	230f      	movs	r3, #15
 80012ea:	18fb      	adds	r3, r7, r3
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2204      	movs	r2, #4
 80012f8:	4013      	ands	r3, r2
 80012fa:	d138      	bne.n	800136e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2234      	movs	r2, #52	; 0x34
 8001300:	5c9b      	ldrb	r3, [r3, r2]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_ADC_Start+0x2a>
 8001306:	2302      	movs	r3, #2
 8001308:	e038      	b.n	800137c <HAL_ADC_Start+0x9c>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2234      	movs	r2, #52	; 0x34
 800130e:	2101      	movs	r1, #1
 8001310:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7e5b      	ldrb	r3, [r3, #25]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d007      	beq.n	800132a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800131a:	230f      	movs	r3, #15
 800131c:	18fc      	adds	r4, r7, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	0018      	movs	r0, r3
 8001322:	f000 fa05 	bl	8001730 <ADC_Enable>
 8001326:	0003      	movs	r3, r0
 8001328:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800132a:	230f      	movs	r3, #15
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d120      	bne.n	8001376 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <HAL_ADC_Start+0xa4>)
 800133a:	4013      	ands	r3, r2
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	0052      	lsls	r2, r2, #1
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2234      	movs	r2, #52	; 0x34
 8001350:	2100      	movs	r1, #0
 8001352:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	221c      	movs	r2, #28
 800135a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2104      	movs	r1, #4
 8001368:	430a      	orrs	r2, r1
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	e003      	b.n	8001376 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800136e:	230f      	movs	r3, #15
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	2202      	movs	r2, #2
 8001374:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001376:	230f      	movs	r3, #15
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	781b      	ldrb	r3, [r3, #0]
}
 800137c:	0018      	movs	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	b005      	add	sp, #20
 8001382:	bd90      	pop	{r4, r7, pc}
 8001384:	fffff0fe 	.word	0xfffff0fe

08001388 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001390:	230f      	movs	r3, #15
 8001392:	18fb      	adds	r3, r7, r3
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2234      	movs	r2, #52	; 0x34
 800139c:	5c9b      	ldrb	r3, [r3, r2]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_Stop+0x1e>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e02a      	b.n	80013fc <HAL_ADC_Stop+0x74>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2234      	movs	r2, #52	; 0x34
 80013aa:	2101      	movs	r1, #1
 80013ac:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80013ae:	250f      	movs	r5, #15
 80013b0:	197c      	adds	r4, r7, r5
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	0018      	movs	r0, r3
 80013b6:	f000 faa1 	bl	80018fc <ADC_ConversionStop>
 80013ba:	0003      	movs	r3, r0
 80013bc:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80013be:	197b      	adds	r3, r7, r5
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d113      	bne.n	80013ee <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80013c6:	250f      	movs	r5, #15
 80013c8:	197c      	adds	r4, r7, r5
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	0018      	movs	r0, r3
 80013ce:	f000 fa2b 	bl	8001828 <ADC_Disable>
 80013d2:	0003      	movs	r3, r0
 80013d4:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80013d6:	197b      	adds	r3, r7, r5
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d107      	bne.n	80013ee <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e2:	4a08      	ldr	r2, [pc, #32]	; (8001404 <HAL_ADC_Stop+0x7c>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	2201      	movs	r2, #1
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2234      	movs	r2, #52	; 0x34
 80013f2:	2100      	movs	r1, #0
 80013f4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80013f6:	230f      	movs	r3, #15
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	781b      	ldrb	r3, [r3, #0]
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b004      	add	sp, #16
 8001402:	bdb0      	pop	{r4, r5, r7, pc}
 8001404:	fffffefe 	.word	0xfffffefe

08001408 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	2b08      	cmp	r3, #8
 8001418:	d102      	bne.n	8001420 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800141a:	2308      	movs	r3, #8
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	e014      	b.n	800144a <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2201      	movs	r2, #1
 8001428:	4013      	ands	r3, r2
 800142a:	2b01      	cmp	r3, #1
 800142c:	d10b      	bne.n	8001446 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001432:	2220      	movs	r2, #32
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2234      	movs	r2, #52	; 0x34
 800143e:	2100      	movs	r1, #0
 8001440:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e06b      	b.n	800151e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001446:	230c      	movs	r3, #12
 8001448:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800144a:	f7ff fddd 	bl	8001008 <HAL_GetTick>
 800144e:	0003      	movs	r3, r0
 8001450:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001452:	e019      	b.n	8001488 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	d016      	beq.n	8001488 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d007      	beq.n	8001470 <HAL_ADC_PollForConversion+0x68>
 8001460:	f7ff fdd2 	bl	8001008 <HAL_GetTick>
 8001464:	0002      	movs	r2, r0
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d20b      	bcs.n	8001488 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001474:	2204      	movs	r2, #4
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2234      	movs	r2, #52	; 0x34
 8001480:	2100      	movs	r1, #0
 8001482:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e04a      	b.n	800151e <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	4013      	ands	r3, r2
 8001492:	d0df      	beq.n	8001454 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001498:	2280      	movs	r2, #128	; 0x80
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	23c0      	movs	r3, #192	; 0xc0
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4013      	ands	r3, r2
 80014ae:	d12d      	bne.n	800150c <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d129      	bne.n	800150c <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2208      	movs	r2, #8
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d122      	bne.n	800150c <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2204      	movs	r2, #4
 80014ce:	4013      	ands	r3, r2
 80014d0:	d110      	bne.n	80014f4 <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	210c      	movs	r1, #12
 80014de:	438a      	bics	r2, r1
 80014e0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <HAL_ADC_PollForConversion+0x120>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	2201      	movs	r2, #1
 80014ec:	431a      	orrs	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	639a      	str	r2, [r3, #56]	; 0x38
 80014f2:	e00b      	b.n	800150c <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f8:	2220      	movs	r2, #32
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001504:	2201      	movs	r2, #1
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7e1b      	ldrb	r3, [r3, #24]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d103      	bne.n	800151c <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	220c      	movs	r2, #12
 800151a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b004      	add	sp, #16
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	fffffefe 	.word	0xfffffefe

0800152c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800153a:	0018      	movs	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800154e:	230f      	movs	r3, #15
 8001550:	18fb      	adds	r3, r7, r3
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	055b      	lsls	r3, r3, #21
 8001562:	429a      	cmp	r2, r3
 8001564:	d011      	beq.n	800158a <HAL_ADC_ConfigChannel+0x46>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	2b01      	cmp	r3, #1
 800156c:	d00d      	beq.n	800158a <HAL_ADC_ConfigChannel+0x46>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	2b02      	cmp	r3, #2
 8001574:	d009      	beq.n	800158a <HAL_ADC_ConfigChannel+0x46>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	2b03      	cmp	r3, #3
 800157c:	d005      	beq.n	800158a <HAL_ADC_ConfigChannel+0x46>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001582:	2b04      	cmp	r3, #4
 8001584:	d001      	beq.n	800158a <HAL_ADC_ConfigChannel+0x46>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2234      	movs	r2, #52	; 0x34
 800158e:	5c9b      	ldrb	r3, [r3, r2]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <HAL_ADC_ConfigChannel+0x54>
 8001594:	2302      	movs	r3, #2
 8001596:	e0bb      	b.n	8001710 <HAL_ADC_ConfigChannel+0x1cc>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2234      	movs	r2, #52	; 0x34
 800159c:	2101      	movs	r1, #1
 800159e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2204      	movs	r2, #4
 80015a8:	4013      	ands	r3, r2
 80015aa:	d000      	beq.n	80015ae <HAL_ADC_ConfigChannel+0x6a>
 80015ac:	e09f      	b.n	80016ee <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4a59      	ldr	r2, [pc, #356]	; (8001718 <HAL_ADC_ConfigChannel+0x1d4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d100      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x76>
 80015b8:	e077      	b.n	80016aa <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2201      	movs	r2, #1
 80015c6:	409a      	lsls	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	055b      	lsls	r3, r3, #21
 80015d8:	429a      	cmp	r2, r3
 80015da:	d037      	beq.n	800164c <HAL_ADC_ConfigChannel+0x108>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d033      	beq.n	800164c <HAL_ADC_ConfigChannel+0x108>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d02f      	beq.n	800164c <HAL_ADC_ConfigChannel+0x108>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d02b      	beq.n	800164c <HAL_ADC_ConfigChannel+0x108>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d027      	beq.n	800164c <HAL_ADC_ConfigChannel+0x108>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	2b05      	cmp	r3, #5
 8001602:	d023      	beq.n	800164c <HAL_ADC_ConfigChannel+0x108>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	2b06      	cmp	r3, #6
 800160a:	d01f      	beq.n	800164c <HAL_ADC_ConfigChannel+0x108>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001610:	2b07      	cmp	r3, #7
 8001612:	d01b      	beq.n	800164c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	2107      	movs	r1, #7
 8001620:	400b      	ands	r3, r1
 8001622:	429a      	cmp	r2, r3
 8001624:	d012      	beq.n	800164c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	695a      	ldr	r2, [r3, #20]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2107      	movs	r1, #7
 8001632:	438a      	bics	r2, r1
 8001634:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6959      	ldr	r1, [r3, #20]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2207      	movs	r2, #7
 8001642:	401a      	ands	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b10      	cmp	r3, #16
 8001652:	d003      	beq.n	800165c <HAL_ADC_ConfigChannel+0x118>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b11      	cmp	r3, #17
 800165a:	d152      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800165c:	4b2f      	ldr	r3, [pc, #188]	; (800171c <HAL_ADC_ConfigChannel+0x1d8>)
 800165e:	6819      	ldr	r1, [r3, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b10      	cmp	r3, #16
 8001666:	d102      	bne.n	800166e <HAL_ADC_ConfigChannel+0x12a>
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	041b      	lsls	r3, r3, #16
 800166c:	e001      	b.n	8001672 <HAL_ADC_ConfigChannel+0x12e>
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	03db      	lsls	r3, r3, #15
 8001672:	4a2a      	ldr	r2, [pc, #168]	; (800171c <HAL_ADC_ConfigChannel+0x1d8>)
 8001674:	430b      	orrs	r3, r1
 8001676:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b10      	cmp	r3, #16
 800167e:	d140      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001680:	4b27      	ldr	r3, [pc, #156]	; (8001720 <HAL_ADC_ConfigChannel+0x1dc>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4927      	ldr	r1, [pc, #156]	; (8001724 <HAL_ADC_ConfigChannel+0x1e0>)
 8001686:	0018      	movs	r0, r3
 8001688:	f7fe fd3e 	bl	8000108 <__udivsi3>
 800168c:	0003      	movs	r3, r0
 800168e:	001a      	movs	r2, r3
 8001690:	0013      	movs	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	189b      	adds	r3, r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800169a:	e002      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	3b01      	subs	r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f9      	bne.n	800169c <HAL_ADC_ConfigChannel+0x158>
 80016a8:	e02b      	b.n	8001702 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2101      	movs	r1, #1
 80016b6:	4099      	lsls	r1, r3
 80016b8:	000b      	movs	r3, r1
 80016ba:	43d9      	mvns	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	400a      	ands	r2, r1
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b10      	cmp	r3, #16
 80016ca:	d003      	beq.n	80016d4 <HAL_ADC_ConfigChannel+0x190>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b11      	cmp	r3, #17
 80016d2:	d116      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_ADC_ConfigChannel+0x1d8>)
 80016d6:	6819      	ldr	r1, [r3, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b10      	cmp	r3, #16
 80016de:	d101      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x1a0>
 80016e0:	4a11      	ldr	r2, [pc, #68]	; (8001728 <HAL_ADC_ConfigChannel+0x1e4>)
 80016e2:	e000      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1a2>
 80016e4:	4a11      	ldr	r2, [pc, #68]	; (800172c <HAL_ADC_ConfigChannel+0x1e8>)
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_ADC_ConfigChannel+0x1d8>)
 80016e8:	400a      	ands	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e009      	b.n	8001702 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f2:	2220      	movs	r2, #32
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80016fa:	230f      	movs	r3, #15
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2234      	movs	r2, #52	; 0x34
 8001706:	2100      	movs	r1, #0
 8001708:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800170a:	230f      	movs	r3, #15
 800170c:	18fb      	adds	r3, r7, r3
 800170e:	781b      	ldrb	r3, [r3, #0]
}
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	b004      	add	sp, #16
 8001716:	bd80      	pop	{r7, pc}
 8001718:	00001001 	.word	0x00001001
 800171c:	40012708 	.word	0x40012708
 8001720:	20000008 	.word	0x20000008
 8001724:	000f4240 	.word	0x000f4240
 8001728:	ff7fffff 	.word	0xff7fffff
 800172c:	ffbfffff 	.word	0xffbfffff

08001730 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2203      	movs	r2, #3
 8001748:	4013      	ands	r3, r2
 800174a:	2b01      	cmp	r3, #1
 800174c:	d112      	bne.n	8001774 <ADC_Enable+0x44>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2201      	movs	r2, #1
 8001756:	4013      	ands	r3, r2
 8001758:	2b01      	cmp	r3, #1
 800175a:	d009      	beq.n	8001770 <ADC_Enable+0x40>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	401a      	ands	r2, r3
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	429a      	cmp	r2, r3
 800176e:	d101      	bne.n	8001774 <ADC_Enable+0x44>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <ADC_Enable+0x46>
 8001774:	2300      	movs	r3, #0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d14b      	bne.n	8001812 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a26      	ldr	r2, [pc, #152]	; (800181c <ADC_Enable+0xec>)
 8001782:	4013      	ands	r3, r2
 8001784:	d00d      	beq.n	80017a2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178a:	2210      	movs	r2, #16
 800178c:	431a      	orrs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001796:	2201      	movs	r2, #1
 8001798:	431a      	orrs	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e038      	b.n	8001814 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2101      	movs	r1, #1
 80017ae:	430a      	orrs	r2, r1
 80017b0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <ADC_Enable+0xf0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	491b      	ldr	r1, [pc, #108]	; (8001824 <ADC_Enable+0xf4>)
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7fe fca5 	bl	8000108 <__udivsi3>
 80017be:	0003      	movs	r3, r0
 80017c0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017c2:	e002      	b.n	80017ca <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f9      	bne.n	80017c4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80017d0:	f7ff fc1a 	bl	8001008 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017d8:	e014      	b.n	8001804 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017da:	f7ff fc15 	bl	8001008 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d90d      	bls.n	8001804 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ec:	2210      	movs	r2, #16
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f8:	2201      	movs	r2, #1
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e007      	b.n	8001814 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2201      	movs	r2, #1
 800180c:	4013      	ands	r3, r2
 800180e:	2b01      	cmp	r3, #1
 8001810:	d1e3      	bne.n	80017da <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b004      	add	sp, #16
 800181a:	bd80      	pop	{r7, pc}
 800181c:	80000017 	.word	0x80000017
 8001820:	20000008 	.word	0x20000008
 8001824:	000f4240 	.word	0x000f4240

08001828 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2203      	movs	r2, #3
 800183c:	4013      	ands	r3, r2
 800183e:	2b01      	cmp	r3, #1
 8001840:	d112      	bne.n	8001868 <ADC_Disable+0x40>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2201      	movs	r2, #1
 800184a:	4013      	ands	r3, r2
 800184c:	2b01      	cmp	r3, #1
 800184e:	d009      	beq.n	8001864 <ADC_Disable+0x3c>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	2380      	movs	r3, #128	; 0x80
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	401a      	ands	r2, r3
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	429a      	cmp	r2, r3
 8001862:	d101      	bne.n	8001868 <ADC_Disable+0x40>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <ADC_Disable+0x42>
 8001868:	2300      	movs	r3, #0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d041      	beq.n	80018f2 <ADC_Disable+0xca>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2205      	movs	r2, #5
 8001876:	4013      	ands	r3, r2
 8001878:	2b01      	cmp	r3, #1
 800187a:	d110      	bne.n	800189e <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2102      	movs	r1, #2
 8001888:	430a      	orrs	r2, r1
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2203      	movs	r2, #3
 8001892:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001894:	f7ff fbb8 	bl	8001008 <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800189c:	e022      	b.n	80018e4 <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a2:	2210      	movs	r2, #16
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ae:	2201      	movs	r2, #1
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e01c      	b.n	80018f4 <ADC_Disable+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018ba:	f7ff fba5 	bl	8001008 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d90d      	bls.n	80018e4 <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018cc:	2210      	movs	r2, #16
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d8:	2201      	movs	r2, #1
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e007      	b.n	80018f4 <ADC_Disable+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2201      	movs	r2, #1
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d0e3      	beq.n	80018ba <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	0018      	movs	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b004      	add	sp, #16
 80018fa:	bd80      	pop	{r7, pc}

080018fc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2204      	movs	r2, #4
 8001910:	4013      	ands	r3, r2
 8001912:	d034      	beq.n	800197e <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2204      	movs	r2, #4
 800191c:	4013      	ands	r3, r2
 800191e:	2b04      	cmp	r3, #4
 8001920:	d10d      	bne.n	800193e <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2202      	movs	r2, #2
 800192a:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800192c:	d107      	bne.n	800193e <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2110      	movs	r1, #16
 800193a:	430a      	orrs	r2, r1
 800193c:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800193e:	f7ff fb63 	bl	8001008 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001946:	e014      	b.n	8001972 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001948:	f7ff fb5e 	bl	8001008 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d90d      	bls.n	8001972 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195a:	2210      	movs	r2, #16
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001966:	2201      	movs	r2, #1
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e006      	b.n	8001980 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2204      	movs	r2, #4
 800197a:	4013      	ands	r3, r2
 800197c:	d1e4      	bne.n	8001948 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	b004      	add	sp, #16
 8001986:	bd80      	pop	{r7, pc}

08001988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	0002      	movs	r2, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	1dfb      	adds	r3, r7, #7
 8001994:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001996:	1dfb      	adds	r3, r7, #7
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b7f      	cmp	r3, #127	; 0x7f
 800199c:	d828      	bhi.n	80019f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800199e:	4a2f      	ldr	r2, [pc, #188]	; (8001a5c <__NVIC_SetPriority+0xd4>)
 80019a0:	1dfb      	adds	r3, r7, #7
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b25b      	sxtb	r3, r3
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	33c0      	adds	r3, #192	; 0xc0
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	589b      	ldr	r3, [r3, r2]
 80019ae:	1dfa      	adds	r2, r7, #7
 80019b0:	7812      	ldrb	r2, [r2, #0]
 80019b2:	0011      	movs	r1, r2
 80019b4:	2203      	movs	r2, #3
 80019b6:	400a      	ands	r2, r1
 80019b8:	00d2      	lsls	r2, r2, #3
 80019ba:	21ff      	movs	r1, #255	; 0xff
 80019bc:	4091      	lsls	r1, r2
 80019be:	000a      	movs	r2, r1
 80019c0:	43d2      	mvns	r2, r2
 80019c2:	401a      	ands	r2, r3
 80019c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	019b      	lsls	r3, r3, #6
 80019ca:	22ff      	movs	r2, #255	; 0xff
 80019cc:	401a      	ands	r2, r3
 80019ce:	1dfb      	adds	r3, r7, #7
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	0018      	movs	r0, r3
 80019d4:	2303      	movs	r3, #3
 80019d6:	4003      	ands	r3, r0
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019dc:	481f      	ldr	r0, [pc, #124]	; (8001a5c <__NVIC_SetPriority+0xd4>)
 80019de:	1dfb      	adds	r3, r7, #7
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	b25b      	sxtb	r3, r3
 80019e4:	089b      	lsrs	r3, r3, #2
 80019e6:	430a      	orrs	r2, r1
 80019e8:	33c0      	adds	r3, #192	; 0xc0
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019ee:	e031      	b.n	8001a54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019f0:	4a1b      	ldr	r2, [pc, #108]	; (8001a60 <__NVIC_SetPriority+0xd8>)
 80019f2:	1dfb      	adds	r3, r7, #7
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	0019      	movs	r1, r3
 80019f8:	230f      	movs	r3, #15
 80019fa:	400b      	ands	r3, r1
 80019fc:	3b08      	subs	r3, #8
 80019fe:	089b      	lsrs	r3, r3, #2
 8001a00:	3306      	adds	r3, #6
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	18d3      	adds	r3, r2, r3
 8001a06:	3304      	adds	r3, #4
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	1dfa      	adds	r2, r7, #7
 8001a0c:	7812      	ldrb	r2, [r2, #0]
 8001a0e:	0011      	movs	r1, r2
 8001a10:	2203      	movs	r2, #3
 8001a12:	400a      	ands	r2, r1
 8001a14:	00d2      	lsls	r2, r2, #3
 8001a16:	21ff      	movs	r1, #255	; 0xff
 8001a18:	4091      	lsls	r1, r2
 8001a1a:	000a      	movs	r2, r1
 8001a1c:	43d2      	mvns	r2, r2
 8001a1e:	401a      	ands	r2, r3
 8001a20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	019b      	lsls	r3, r3, #6
 8001a26:	22ff      	movs	r2, #255	; 0xff
 8001a28:	401a      	ands	r2, r3
 8001a2a:	1dfb      	adds	r3, r7, #7
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	0018      	movs	r0, r3
 8001a30:	2303      	movs	r3, #3
 8001a32:	4003      	ands	r3, r0
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a38:	4809      	ldr	r0, [pc, #36]	; (8001a60 <__NVIC_SetPriority+0xd8>)
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	001c      	movs	r4, r3
 8001a40:	230f      	movs	r3, #15
 8001a42:	4023      	ands	r3, r4
 8001a44:	3b08      	subs	r3, #8
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	3306      	adds	r3, #6
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	18c3      	adds	r3, r0, r3
 8001a50:	3304      	adds	r3, #4
 8001a52:	601a      	str	r2, [r3, #0]
}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b003      	add	sp, #12
 8001a5a:	bd90      	pop	{r4, r7, pc}
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <SysTick_Config+0x40>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a76:	2301      	movs	r3, #1
 8001a78:	e010      	b.n	8001a9c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <SysTick_Config+0x44>)
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	3a01      	subs	r2, #1
 8001a80:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a82:	2301      	movs	r3, #1
 8001a84:	425b      	negs	r3, r3
 8001a86:	2103      	movs	r1, #3
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff ff7d 	bl	8001988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <SysTick_Config+0x44>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <SysTick_Config+0x44>)
 8001a96:	2207      	movs	r2, #7
 8001a98:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	00ffffff 	.word	0x00ffffff
 8001aa8:	e000e010 	.word	0xe000e010

08001aac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	187b      	adds	r3, r7, r1
 8001aba:	1c02      	adds	r2, r0, #0
 8001abc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	187b      	adds	r3, r7, r1
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	b25b      	sxtb	r3, r3
 8001ac6:	0011      	movs	r1, r2
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f7ff ff5d 	bl	8001988 <__NVIC_SetPriority>
}
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b004      	add	sp, #16
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff ffbf 	bl	8001a64 <SysTick_Config>
 8001ae6:	0003      	movs	r3, r0
}
 8001ae8:	0018      	movs	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b002      	add	sp, #8
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afe:	e14f      	b.n	8001da0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2101      	movs	r1, #1
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4091      	lsls	r1, r2
 8001b0a:	000a      	movs	r2, r1
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d100      	bne.n	8001b18 <HAL_GPIO_Init+0x28>
 8001b16:	e140      	b.n	8001d9a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d00b      	beq.n	8001b38 <HAL_GPIO_Init+0x48>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d007      	beq.n	8001b38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b2c:	2b11      	cmp	r3, #17
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b12      	cmp	r3, #18
 8001b36:	d130      	bne.n	8001b9a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	409a      	lsls	r2, r3
 8001b46:	0013      	movs	r3, r2
 8001b48:	43da      	mvns	r2, r3
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	0013      	movs	r3, r2
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b6e:	2201      	movs	r2, #1
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	409a      	lsls	r2, r3
 8001b74:	0013      	movs	r3, r2
 8001b76:	43da      	mvns	r2, r3
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	2201      	movs	r2, #1
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	0013      	movs	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	0013      	movs	r3, r2
 8001baa:	43da      	mvns	r2, r3
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	0013      	movs	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0xea>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b12      	cmp	r3, #18
 8001bd8:	d123      	bne.n	8001c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	58d3      	ldr	r3, [r2, r3]
 8001be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	2207      	movs	r2, #7
 8001bec:	4013      	ands	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	0013      	movs	r3, r2
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2107      	movs	r1, #7
 8001c06:	400b      	ands	r3, r1
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	0013      	movs	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	08da      	lsrs	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3208      	adds	r2, #8
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	6939      	ldr	r1, [r7, #16]
 8001c20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	0013      	movs	r3, r2
 8001c32:	43da      	mvns	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2203      	movs	r2, #3
 8001c40:	401a      	ands	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	409a      	lsls	r2, r3
 8001c48:	0013      	movs	r3, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	055b      	lsls	r3, r3, #21
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d100      	bne.n	8001c64 <HAL_GPIO_Init+0x174>
 8001c62:	e09a      	b.n	8001d9a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c64:	4b54      	ldr	r3, [pc, #336]	; (8001db8 <HAL_GPIO_Init+0x2c8>)
 8001c66:	699a      	ldr	r2, [r3, #24]
 8001c68:	4b53      	ldr	r3, [pc, #332]	; (8001db8 <HAL_GPIO_Init+0x2c8>)
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	619a      	str	r2, [r3, #24]
 8001c70:	4b51      	ldr	r3, [pc, #324]	; (8001db8 <HAL_GPIO_Init+0x2c8>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	2201      	movs	r2, #1
 8001c76:	4013      	ands	r3, r2
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c7c:	4a4f      	ldr	r2, [pc, #316]	; (8001dbc <HAL_GPIO_Init+0x2cc>)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	3302      	adds	r3, #2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	589b      	ldr	r3, [r3, r2]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	4013      	ands	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	220f      	movs	r2, #15
 8001c94:	409a      	lsls	r2, r3
 8001c96:	0013      	movs	r3, r2
 8001c98:	43da      	mvns	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	2390      	movs	r3, #144	; 0x90
 8001ca4:	05db      	lsls	r3, r3, #23
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d013      	beq.n	8001cd2 <HAL_GPIO_Init+0x1e2>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a44      	ldr	r2, [pc, #272]	; (8001dc0 <HAL_GPIO_Init+0x2d0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00d      	beq.n	8001cce <HAL_GPIO_Init+0x1de>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a43      	ldr	r2, [pc, #268]	; (8001dc4 <HAL_GPIO_Init+0x2d4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d007      	beq.n	8001cca <HAL_GPIO_Init+0x1da>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a42      	ldr	r2, [pc, #264]	; (8001dc8 <HAL_GPIO_Init+0x2d8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_GPIO_Init+0x1d6>
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e006      	b.n	8001cd4 <HAL_GPIO_Init+0x1e4>
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	e004      	b.n	8001cd4 <HAL_GPIO_Init+0x1e4>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e002      	b.n	8001cd4 <HAL_GPIO_Init+0x1e4>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_GPIO_Init+0x1e4>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	2103      	movs	r1, #3
 8001cd8:	400a      	ands	r2, r1
 8001cda:	0092      	lsls	r2, r2, #2
 8001cdc:	4093      	lsls	r3, r2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ce4:	4935      	ldr	r1, [pc, #212]	; (8001dbc <HAL_GPIO_Init+0x2cc>)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	089b      	lsrs	r3, r3, #2
 8001cea:	3302      	adds	r3, #2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	025b      	lsls	r3, r3, #9
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d16:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d1c:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	43da      	mvns	r2, r3
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	029b      	lsls	r3, r3, #10
 8001d34:	4013      	ands	r3, r2
 8001d36:	d003      	beq.n	8001d40 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	035b      	lsls	r3, r3, #13
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d6a:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	43da      	mvns	r2, r3
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	039b      	lsls	r3, r3, #14
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d94:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <HAL_GPIO_Init+0x2dc>)
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	40da      	lsrs	r2, r3
 8001da8:	1e13      	subs	r3, r2, #0
 8001daa:	d000      	beq.n	8001dae <HAL_GPIO_Init+0x2be>
 8001dac:	e6a8      	b.n	8001b00 <HAL_GPIO_Init+0x10>
  } 
}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b006      	add	sp, #24
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	48000400 	.word	0x48000400
 8001dc4:	48000800 	.word	0x48000800
 8001dc8:	48000c00 	.word	0x48000c00
 8001dcc:	40010400 	.word	0x40010400

08001dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	0008      	movs	r0, r1
 8001dda:	0011      	movs	r1, r2
 8001ddc:	1cbb      	adds	r3, r7, #2
 8001dde:	1c02      	adds	r2, r0, #0
 8001de0:	801a      	strh	r2, [r3, #0]
 8001de2:	1c7b      	adds	r3, r7, #1
 8001de4:	1c0a      	adds	r2, r1, #0
 8001de6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001de8:	1c7b      	adds	r3, r7, #1
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d004      	beq.n	8001dfa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001df0:	1cbb      	adds	r3, r7, #2
 8001df2:	881a      	ldrh	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001df8:	e003      	b.n	8001e02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dfa:	1cbb      	adds	r3, r7, #2
 8001dfc:	881a      	ldrh	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b002      	add	sp, #8
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e303      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2201      	movs	r2, #1
 8001e24:	4013      	ands	r3, r2
 8001e26:	d100      	bne.n	8001e2a <HAL_RCC_OscConfig+0x1e>
 8001e28:	e08d      	b.n	8001f46 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e2a:	4bc4      	ldr	r3, [pc, #784]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	220c      	movs	r2, #12
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d00e      	beq.n	8001e54 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e36:	4bc1      	ldr	r3, [pc, #772]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d116      	bne.n	8001e70 <HAL_RCC_OscConfig+0x64>
 8001e42:	4bbe      	ldr	r3, [pc, #760]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	025b      	lsls	r3, r3, #9
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	025b      	lsls	r3, r3, #9
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d10d      	bne.n	8001e70 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	4bb9      	ldr	r3, [pc, #740]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	029b      	lsls	r3, r3, #10
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d100      	bne.n	8001e62 <HAL_RCC_OscConfig+0x56>
 8001e60:	e070      	b.n	8001f44 <HAL_RCC_OscConfig+0x138>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d000      	beq.n	8001e6c <HAL_RCC_OscConfig+0x60>
 8001e6a:	e06b      	b.n	8001f44 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e2da      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d107      	bne.n	8001e88 <HAL_RCC_OscConfig+0x7c>
 8001e78:	4bb0      	ldr	r3, [pc, #704]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4baf      	ldr	r3, [pc, #700]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001e7e:	2180      	movs	r1, #128	; 0x80
 8001e80:	0249      	lsls	r1, r1, #9
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	e02f      	b.n	8001ee8 <HAL_RCC_OscConfig+0xdc>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10c      	bne.n	8001eaa <HAL_RCC_OscConfig+0x9e>
 8001e90:	4baa      	ldr	r3, [pc, #680]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4ba9      	ldr	r3, [pc, #676]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001e96:	49aa      	ldr	r1, [pc, #680]	; (8002140 <HAL_RCC_OscConfig+0x334>)
 8001e98:	400a      	ands	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	4ba7      	ldr	r3, [pc, #668]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4ba6      	ldr	r3, [pc, #664]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001ea2:	49a8      	ldr	r1, [pc, #672]	; (8002144 <HAL_RCC_OscConfig+0x338>)
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e01e      	b.n	8001ee8 <HAL_RCC_OscConfig+0xdc>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b05      	cmp	r3, #5
 8001eb0:	d10e      	bne.n	8001ed0 <HAL_RCC_OscConfig+0xc4>
 8001eb2:	4ba2      	ldr	r3, [pc, #648]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	4ba1      	ldr	r3, [pc, #644]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001eb8:	2180      	movs	r1, #128	; 0x80
 8001eba:	02c9      	lsls	r1, r1, #11
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	4b9e      	ldr	r3, [pc, #632]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b9d      	ldr	r3, [pc, #628]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001ec6:	2180      	movs	r1, #128	; 0x80
 8001ec8:	0249      	lsls	r1, r1, #9
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCC_OscConfig+0xdc>
 8001ed0:	4b9a      	ldr	r3, [pc, #616]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b99      	ldr	r3, [pc, #612]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001ed6:	499a      	ldr	r1, [pc, #616]	; (8002140 <HAL_RCC_OscConfig+0x334>)
 8001ed8:	400a      	ands	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	4b97      	ldr	r3, [pc, #604]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b96      	ldr	r3, [pc, #600]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001ee2:	4998      	ldr	r1, [pc, #608]	; (8002144 <HAL_RCC_OscConfig+0x338>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d014      	beq.n	8001f1a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff f88a 	bl	8001008 <HAL_GetTick>
 8001ef4:	0003      	movs	r3, r0
 8001ef6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001efa:	f7ff f885 	bl	8001008 <HAL_GetTick>
 8001efe:	0002      	movs	r2, r0
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b64      	cmp	r3, #100	; 0x64
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e28c      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0c:	4b8b      	ldr	r3, [pc, #556]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	029b      	lsls	r3, r3, #10
 8001f14:	4013      	ands	r3, r2
 8001f16:	d0f0      	beq.n	8001efa <HAL_RCC_OscConfig+0xee>
 8001f18:	e015      	b.n	8001f46 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1a:	f7ff f875 	bl	8001008 <HAL_GetTick>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff f870 	bl	8001008 <HAL_GetTick>
 8001f28:	0002      	movs	r2, r0
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	; 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e277      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	4b81      	ldr	r3, [pc, #516]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	029b      	lsls	r3, r3, #10
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x118>
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d100      	bne.n	8001f52 <HAL_RCC_OscConfig+0x146>
 8001f50:	e069      	b.n	8002026 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f52:	4b7a      	ldr	r3, [pc, #488]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	220c      	movs	r2, #12
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d00b      	beq.n	8001f74 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f5c:	4b77      	ldr	r3, [pc, #476]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	220c      	movs	r2, #12
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d11c      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x196>
 8001f68:	4b74      	ldr	r3, [pc, #464]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	025b      	lsls	r3, r3, #9
 8001f70:	4013      	ands	r3, r2
 8001f72:	d116      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f74:	4b71      	ldr	r3, [pc, #452]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d005      	beq.n	8001f8a <HAL_RCC_OscConfig+0x17e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d001      	beq.n	8001f8a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e24d      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8a:	4b6c      	ldr	r3, [pc, #432]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	22f8      	movs	r2, #248	; 0xf8
 8001f90:	4393      	bics	r3, r2
 8001f92:	0019      	movs	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	00da      	lsls	r2, r3, #3
 8001f9a:	4b68      	ldr	r3, [pc, #416]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa0:	e041      	b.n	8002026 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d024      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001faa:	4b64      	ldr	r3, [pc, #400]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4b63      	ldr	r3, [pc, #396]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7ff f827 	bl	8001008 <HAL_GetTick>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc0:	f7ff f822 	bl	8001008 <HAL_GetTick>
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e229      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd2:	4b5a      	ldr	r3, [pc, #360]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d0f1      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fdc:	4b57      	ldr	r3, [pc, #348]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	22f8      	movs	r2, #248	; 0xf8
 8001fe2:	4393      	bics	r3, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00da      	lsls	r2, r3, #3
 8001fec:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e018      	b.n	8002026 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff4:	4b51      	ldr	r3, [pc, #324]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b50      	ldr	r3, [pc, #320]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	438a      	bics	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7ff f802 	bl	8001008 <HAL_GetTick>
 8002004:	0003      	movs	r3, r0
 8002006:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200a:	f7fe fffd 	bl	8001008 <HAL_GetTick>
 800200e:	0002      	movs	r2, r0
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e204      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201c:	4b47      	ldr	r3, [pc, #284]	; (800213c <HAL_RCC_OscConfig+0x330>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2202      	movs	r2, #2
 8002022:	4013      	ands	r3, r2
 8002024:	d1f1      	bne.n	800200a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2208      	movs	r2, #8
 800202c:	4013      	ands	r3, r2
 800202e:	d036      	beq.n	800209e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d019      	beq.n	800206c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002038:	4b40      	ldr	r3, [pc, #256]	; (800213c <HAL_RCC_OscConfig+0x330>)
 800203a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800203c:	4b3f      	ldr	r3, [pc, #252]	; (800213c <HAL_RCC_OscConfig+0x330>)
 800203e:	2101      	movs	r1, #1
 8002040:	430a      	orrs	r2, r1
 8002042:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002044:	f7fe ffe0 	bl	8001008 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204e:	f7fe ffdb 	bl	8001008 <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1e2      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002060:	4b36      	ldr	r3, [pc, #216]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	2202      	movs	r2, #2
 8002066:	4013      	ands	r3, r2
 8002068:	d0f1      	beq.n	800204e <HAL_RCC_OscConfig+0x242>
 800206a:	e018      	b.n	800209e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206c:	4b33      	ldr	r3, [pc, #204]	; (800213c <HAL_RCC_OscConfig+0x330>)
 800206e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002070:	4b32      	ldr	r3, [pc, #200]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8002072:	2101      	movs	r1, #1
 8002074:	438a      	bics	r2, r1
 8002076:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002078:	f7fe ffc6 	bl	8001008 <HAL_GetTick>
 800207c:	0003      	movs	r3, r0
 800207e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002082:	f7fe ffc1 	bl	8001008 <HAL_GetTick>
 8002086:	0002      	movs	r2, r0
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e1c8      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002094:	4b29      	ldr	r3, [pc, #164]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	2202      	movs	r2, #2
 800209a:	4013      	ands	r3, r2
 800209c:	d1f1      	bne.n	8002082 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2204      	movs	r2, #4
 80020a4:	4013      	ands	r3, r2
 80020a6:	d100      	bne.n	80020aa <HAL_RCC_OscConfig+0x29e>
 80020a8:	e0b6      	b.n	8002218 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020aa:	231f      	movs	r3, #31
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b2:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_RCC_OscConfig+0x330>)
 80020b4:	69da      	ldr	r2, [r3, #28]
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	055b      	lsls	r3, r3, #21
 80020ba:	4013      	ands	r3, r2
 80020bc:	d111      	bne.n	80020e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	4b1f      	ldr	r3, [pc, #124]	; (800213c <HAL_RCC_OscConfig+0x330>)
 80020c0:	69da      	ldr	r2, [r3, #28]
 80020c2:	4b1e      	ldr	r3, [pc, #120]	; (800213c <HAL_RCC_OscConfig+0x330>)
 80020c4:	2180      	movs	r1, #128	; 0x80
 80020c6:	0549      	lsls	r1, r1, #21
 80020c8:	430a      	orrs	r2, r1
 80020ca:	61da      	str	r2, [r3, #28]
 80020cc:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_RCC_OscConfig+0x330>)
 80020ce:	69da      	ldr	r2, [r3, #28]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	055b      	lsls	r3, r3, #21
 80020d4:	4013      	ands	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020da:	231f      	movs	r3, #31
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e2:	4b19      	ldr	r3, [pc, #100]	; (8002148 <HAL_RCC_OscConfig+0x33c>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4013      	ands	r3, r2
 80020ec:	d11a      	bne.n	8002124 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <HAL_RCC_OscConfig+0x33c>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_RCC_OscConfig+0x33c>)
 80020f4:	2180      	movs	r1, #128	; 0x80
 80020f6:	0049      	lsls	r1, r1, #1
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fc:	f7fe ff84 	bl	8001008 <HAL_GetTick>
 8002100:	0003      	movs	r3, r0
 8002102:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002106:	f7fe ff7f 	bl	8001008 <HAL_GetTick>
 800210a:	0002      	movs	r2, r0
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b64      	cmp	r3, #100	; 0x64
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e186      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_RCC_OscConfig+0x33c>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4013      	ands	r3, r2
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d10f      	bne.n	800214c <HAL_RCC_OscConfig+0x340>
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <HAL_RCC_OscConfig+0x330>)
 800212e:	6a1a      	ldr	r2, [r3, #32]
 8002130:	4b02      	ldr	r3, [pc, #8]	; (800213c <HAL_RCC_OscConfig+0x330>)
 8002132:	2101      	movs	r1, #1
 8002134:	430a      	orrs	r2, r1
 8002136:	621a      	str	r2, [r3, #32]
 8002138:	e036      	b.n	80021a8 <HAL_RCC_OscConfig+0x39c>
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	40021000 	.word	0x40021000
 8002140:	fffeffff 	.word	0xfffeffff
 8002144:	fffbffff 	.word	0xfffbffff
 8002148:	40007000 	.word	0x40007000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10c      	bne.n	800216e <HAL_RCC_OscConfig+0x362>
 8002154:	4bb6      	ldr	r3, [pc, #728]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002156:	6a1a      	ldr	r2, [r3, #32]
 8002158:	4bb5      	ldr	r3, [pc, #724]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 800215a:	2101      	movs	r1, #1
 800215c:	438a      	bics	r2, r1
 800215e:	621a      	str	r2, [r3, #32]
 8002160:	4bb3      	ldr	r3, [pc, #716]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002162:	6a1a      	ldr	r2, [r3, #32]
 8002164:	4bb2      	ldr	r3, [pc, #712]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002166:	2104      	movs	r1, #4
 8002168:	438a      	bics	r2, r1
 800216a:	621a      	str	r2, [r3, #32]
 800216c:	e01c      	b.n	80021a8 <HAL_RCC_OscConfig+0x39c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b05      	cmp	r3, #5
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x384>
 8002176:	4bae      	ldr	r3, [pc, #696]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002178:	6a1a      	ldr	r2, [r3, #32]
 800217a:	4bad      	ldr	r3, [pc, #692]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 800217c:	2104      	movs	r1, #4
 800217e:	430a      	orrs	r2, r1
 8002180:	621a      	str	r2, [r3, #32]
 8002182:	4bab      	ldr	r3, [pc, #684]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002184:	6a1a      	ldr	r2, [r3, #32]
 8002186:	4baa      	ldr	r3, [pc, #680]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002188:	2101      	movs	r1, #1
 800218a:	430a      	orrs	r2, r1
 800218c:	621a      	str	r2, [r3, #32]
 800218e:	e00b      	b.n	80021a8 <HAL_RCC_OscConfig+0x39c>
 8002190:	4ba7      	ldr	r3, [pc, #668]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002192:	6a1a      	ldr	r2, [r3, #32]
 8002194:	4ba6      	ldr	r3, [pc, #664]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002196:	2101      	movs	r1, #1
 8002198:	438a      	bics	r2, r1
 800219a:	621a      	str	r2, [r3, #32]
 800219c:	4ba4      	ldr	r3, [pc, #656]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 800219e:	6a1a      	ldr	r2, [r3, #32]
 80021a0:	4ba3      	ldr	r3, [pc, #652]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 80021a2:	2104      	movs	r1, #4
 80021a4:	438a      	bics	r2, r1
 80021a6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d014      	beq.n	80021da <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b0:	f7fe ff2a 	bl	8001008 <HAL_GetTick>
 80021b4:	0003      	movs	r3, r0
 80021b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b8:	e009      	b.n	80021ce <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7fe ff25 	bl	8001008 <HAL_GetTick>
 80021be:	0002      	movs	r2, r0
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	4a9b      	ldr	r2, [pc, #620]	; (8002434 <HAL_RCC_OscConfig+0x628>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e12b      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ce:	4b98      	ldr	r3, [pc, #608]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	2202      	movs	r2, #2
 80021d4:	4013      	ands	r3, r2
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x3ae>
 80021d8:	e013      	b.n	8002202 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021da:	f7fe ff15 	bl	8001008 <HAL_GetTick>
 80021de:	0003      	movs	r3, r0
 80021e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e2:	e009      	b.n	80021f8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e4:	f7fe ff10 	bl	8001008 <HAL_GetTick>
 80021e8:	0002      	movs	r2, r0
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	4a91      	ldr	r2, [pc, #580]	; (8002434 <HAL_RCC_OscConfig+0x628>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e116      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	4b8d      	ldr	r3, [pc, #564]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	2202      	movs	r2, #2
 80021fe:	4013      	ands	r3, r2
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002202:	231f      	movs	r3, #31
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d105      	bne.n	8002218 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220c:	4b88      	ldr	r3, [pc, #544]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 800220e:	69da      	ldr	r2, [r3, #28]
 8002210:	4b87      	ldr	r3, [pc, #540]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002212:	4989      	ldr	r1, [pc, #548]	; (8002438 <HAL_RCC_OscConfig+0x62c>)
 8002214:	400a      	ands	r2, r1
 8002216:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2210      	movs	r2, #16
 800221e:	4013      	ands	r3, r2
 8002220:	d063      	beq.n	80022ea <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d12a      	bne.n	8002280 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800222a:	4b81      	ldr	r3, [pc, #516]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 800222c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800222e:	4b80      	ldr	r3, [pc, #512]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002230:	2104      	movs	r1, #4
 8002232:	430a      	orrs	r2, r1
 8002234:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002236:	4b7e      	ldr	r3, [pc, #504]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800223a:	4b7d      	ldr	r3, [pc, #500]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 800223c:	2101      	movs	r1, #1
 800223e:	430a      	orrs	r2, r1
 8002240:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002242:	f7fe fee1 	bl	8001008 <HAL_GetTick>
 8002246:	0003      	movs	r3, r0
 8002248:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800224c:	f7fe fedc 	bl	8001008 <HAL_GetTick>
 8002250:	0002      	movs	r2, r0
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e0e3      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800225e:	4b74      	ldr	r3, [pc, #464]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002262:	2202      	movs	r2, #2
 8002264:	4013      	ands	r3, r2
 8002266:	d0f1      	beq.n	800224c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002268:	4b71      	ldr	r3, [pc, #452]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 800226a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226c:	22f8      	movs	r2, #248	; 0xf8
 800226e:	4393      	bics	r3, r2
 8002270:	0019      	movs	r1, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	00da      	lsls	r2, r3, #3
 8002278:	4b6d      	ldr	r3, [pc, #436]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 800227a:	430a      	orrs	r2, r1
 800227c:	635a      	str	r2, [r3, #52]	; 0x34
 800227e:	e034      	b.n	80022ea <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	3305      	adds	r3, #5
 8002286:	d111      	bne.n	80022ac <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002288:	4b69      	ldr	r3, [pc, #420]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 800228a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800228c:	4b68      	ldr	r3, [pc, #416]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 800228e:	2104      	movs	r1, #4
 8002290:	438a      	bics	r2, r1
 8002292:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002294:	4b66      	ldr	r3, [pc, #408]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002298:	22f8      	movs	r2, #248	; 0xf8
 800229a:	4393      	bics	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	00da      	lsls	r2, r3, #3
 80022a4:	4b62      	ldr	r3, [pc, #392]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 80022a6:	430a      	orrs	r2, r1
 80022a8:	635a      	str	r2, [r3, #52]	; 0x34
 80022aa:	e01e      	b.n	80022ea <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022ac:	4b60      	ldr	r3, [pc, #384]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 80022ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b0:	4b5f      	ldr	r3, [pc, #380]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 80022b2:	2104      	movs	r1, #4
 80022b4:	430a      	orrs	r2, r1
 80022b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80022b8:	4b5d      	ldr	r3, [pc, #372]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 80022ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022bc:	4b5c      	ldr	r3, [pc, #368]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 80022be:	2101      	movs	r1, #1
 80022c0:	438a      	bics	r2, r1
 80022c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c4:	f7fe fea0 	bl	8001008 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022ce:	f7fe fe9b 	bl	8001008 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e0a2      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022e0:	4b53      	ldr	r3, [pc, #332]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 80022e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e4:	2202      	movs	r2, #2
 80022e6:	4013      	ands	r3, r2
 80022e8:	d1f1      	bne.n	80022ce <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d100      	bne.n	80022f4 <HAL_RCC_OscConfig+0x4e8>
 80022f2:	e097      	b.n	8002424 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f4:	4b4e      	ldr	r3, [pc, #312]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	220c      	movs	r2, #12
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d100      	bne.n	8002302 <HAL_RCC_OscConfig+0x4f6>
 8002300:	e06b      	b.n	80023da <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d14c      	bne.n	80023a4 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230a:	4b49      	ldr	r3, [pc, #292]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	4b48      	ldr	r3, [pc, #288]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002310:	494a      	ldr	r1, [pc, #296]	; (800243c <HAL_RCC_OscConfig+0x630>)
 8002312:	400a      	ands	r2, r1
 8002314:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7fe fe77 	bl	8001008 <HAL_GetTick>
 800231a:	0003      	movs	r3, r0
 800231c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002320:	f7fe fe72 	bl	8001008 <HAL_GetTick>
 8002324:	0002      	movs	r2, r0
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e079      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002332:	4b3f      	ldr	r3, [pc, #252]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	049b      	lsls	r3, r3, #18
 800233a:	4013      	ands	r3, r2
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233e:	4b3c      	ldr	r3, [pc, #240]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	220f      	movs	r2, #15
 8002344:	4393      	bics	r3, r2
 8002346:	0019      	movs	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800234c:	4b38      	ldr	r3, [pc, #224]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 800234e:	430a      	orrs	r2, r1
 8002350:	62da      	str	r2, [r3, #44]	; 0x2c
 8002352:	4b37      	ldr	r3, [pc, #220]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4a3a      	ldr	r2, [pc, #232]	; (8002440 <HAL_RCC_OscConfig+0x634>)
 8002358:	4013      	ands	r3, r2
 800235a:	0019      	movs	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	431a      	orrs	r2, r3
 8002366:	4b32      	ldr	r3, [pc, #200]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002368:	430a      	orrs	r2, r1
 800236a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800236c:	4b30      	ldr	r3, [pc, #192]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b2f      	ldr	r3, [pc, #188]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	0449      	lsls	r1, r1, #17
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7fe fe45 	bl	8001008 <HAL_GetTick>
 800237e:	0003      	movs	r3, r0
 8002380:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe fe40 	bl	8001008 <HAL_GetTick>
 8002388:	0002      	movs	r2, r0
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e047      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	049b      	lsls	r3, r3, #18
 800239e:	4013      	ands	r3, r2
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x578>
 80023a2:	e03f      	b.n	8002424 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a4:	4b22      	ldr	r3, [pc, #136]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b21      	ldr	r3, [pc, #132]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 80023aa:	4924      	ldr	r1, [pc, #144]	; (800243c <HAL_RCC_OscConfig+0x630>)
 80023ac:	400a      	ands	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7fe fe2a 	bl	8001008 <HAL_GetTick>
 80023b4:	0003      	movs	r3, r0
 80023b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ba:	f7fe fe25 	bl	8001008 <HAL_GetTick>
 80023be:	0002      	movs	r2, r0
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e02c      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023cc:	4b18      	ldr	r3, [pc, #96]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	049b      	lsls	r3, r3, #18
 80023d4:	4013      	ands	r3, r2
 80023d6:	d1f0      	bne.n	80023ba <HAL_RCC_OscConfig+0x5ae>
 80023d8:	e024      	b.n	8002424 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e01f      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80023ec:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_RCC_OscConfig+0x624>)
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	025b      	lsls	r3, r3, #9
 80023f8:	401a      	ands	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	429a      	cmp	r2, r3
 8002400:	d10e      	bne.n	8002420 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	220f      	movs	r2, #15
 8002406:	401a      	ands	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d107      	bne.n	8002420 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	23f0      	movs	r3, #240	; 0xf0
 8002414:	039b      	lsls	r3, r3, #14
 8002416:	401a      	ands	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	0018      	movs	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	b008      	add	sp, #32
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	40021000 	.word	0x40021000
 8002434:	00001388 	.word	0x00001388
 8002438:	efffffff 	.word	0xefffffff
 800243c:	feffffff 	.word	0xfeffffff
 8002440:	ffc2ffff 	.word	0xffc2ffff

08002444 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0b3      	b.n	80025c0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002458:	4b5b      	ldr	r3, [pc, #364]	; (80025c8 <HAL_RCC_ClockConfig+0x184>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2201      	movs	r2, #1
 800245e:	4013      	ands	r3, r2
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d911      	bls.n	800248a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b58      	ldr	r3, [pc, #352]	; (80025c8 <HAL_RCC_ClockConfig+0x184>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2201      	movs	r2, #1
 800246c:	4393      	bics	r3, r2
 800246e:	0019      	movs	r1, r3
 8002470:	4b55      	ldr	r3, [pc, #340]	; (80025c8 <HAL_RCC_ClockConfig+0x184>)
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002478:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_RCC_ClockConfig+0x184>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2201      	movs	r2, #1
 800247e:	4013      	ands	r3, r2
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d001      	beq.n	800248a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e09a      	b.n	80025c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2202      	movs	r2, #2
 8002490:	4013      	ands	r3, r2
 8002492:	d015      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2204      	movs	r2, #4
 800249a:	4013      	ands	r3, r2
 800249c:	d006      	beq.n	80024ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800249e:	4b4b      	ldr	r3, [pc, #300]	; (80025cc <HAL_RCC_ClockConfig+0x188>)
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	4b4a      	ldr	r3, [pc, #296]	; (80025cc <HAL_RCC_ClockConfig+0x188>)
 80024a4:	21e0      	movs	r1, #224	; 0xe0
 80024a6:	00c9      	lsls	r1, r1, #3
 80024a8:	430a      	orrs	r2, r1
 80024aa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ac:	4b47      	ldr	r3, [pc, #284]	; (80025cc <HAL_RCC_ClockConfig+0x188>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	22f0      	movs	r2, #240	; 0xf0
 80024b2:	4393      	bics	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	4b44      	ldr	r3, [pc, #272]	; (80025cc <HAL_RCC_ClockConfig+0x188>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2201      	movs	r2, #1
 80024c6:	4013      	ands	r3, r2
 80024c8:	d040      	beq.n	800254c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <HAL_RCC_ClockConfig+0x188>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	029b      	lsls	r3, r3, #10
 80024da:	4013      	ands	r3, r2
 80024dc:	d114      	bne.n	8002508 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e06e      	b.n	80025c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ea:	4b38      	ldr	r3, [pc, #224]	; (80025cc <HAL_RCC_ClockConfig+0x188>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	049b      	lsls	r3, r3, #18
 80024f2:	4013      	ands	r3, r2
 80024f4:	d108      	bne.n	8002508 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e062      	b.n	80025c0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fa:	4b34      	ldr	r3, [pc, #208]	; (80025cc <HAL_RCC_ClockConfig+0x188>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2202      	movs	r2, #2
 8002500:	4013      	ands	r3, r2
 8002502:	d101      	bne.n	8002508 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e05b      	b.n	80025c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002508:	4b30      	ldr	r3, [pc, #192]	; (80025cc <HAL_RCC_ClockConfig+0x188>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2203      	movs	r2, #3
 800250e:	4393      	bics	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <HAL_RCC_ClockConfig+0x188>)
 8002518:	430a      	orrs	r2, r1
 800251a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800251c:	f7fe fd74 	bl	8001008 <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002524:	e009      	b.n	800253a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002526:	f7fe fd6f 	bl	8001008 <HAL_GetTick>
 800252a:	0002      	movs	r2, r0
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	4a27      	ldr	r2, [pc, #156]	; (80025d0 <HAL_RCC_ClockConfig+0x18c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e042      	b.n	80025c0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	4b24      	ldr	r3, [pc, #144]	; (80025cc <HAL_RCC_ClockConfig+0x188>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	220c      	movs	r2, #12
 8002540:	401a      	ands	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	429a      	cmp	r2, r3
 800254a:	d1ec      	bne.n	8002526 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800254c:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <HAL_RCC_ClockConfig+0x184>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2201      	movs	r2, #1
 8002552:	4013      	ands	r3, r2
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d211      	bcs.n	800257e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <HAL_RCC_ClockConfig+0x184>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2201      	movs	r2, #1
 8002560:	4393      	bics	r3, r2
 8002562:	0019      	movs	r1, r3
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <HAL_RCC_ClockConfig+0x184>)
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256c:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <HAL_RCC_ClockConfig+0x184>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2201      	movs	r2, #1
 8002572:	4013      	ands	r3, r2
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d001      	beq.n	800257e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e020      	b.n	80025c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2204      	movs	r2, #4
 8002584:	4013      	ands	r3, r2
 8002586:	d009      	beq.n	800259c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002588:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_RCC_ClockConfig+0x188>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a11      	ldr	r2, [pc, #68]	; (80025d4 <HAL_RCC_ClockConfig+0x190>)
 800258e:	4013      	ands	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <HAL_RCC_ClockConfig+0x188>)
 8002598:	430a      	orrs	r2, r1
 800259a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800259c:	f000 f820 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 80025a0:	0001      	movs	r1, r0
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_RCC_ClockConfig+0x188>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	220f      	movs	r2, #15
 80025aa:	4013      	ands	r3, r2
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_RCC_ClockConfig+0x194>)
 80025ae:	5cd3      	ldrb	r3, [r2, r3]
 80025b0:	000a      	movs	r2, r1
 80025b2:	40da      	lsrs	r2, r3
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HAL_RCC_ClockConfig+0x198>)
 80025b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7fe fcdf 	bl	8000f7c <HAL_InitTick>
  
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	0018      	movs	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b004      	add	sp, #16
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40022000 	.word	0x40022000
 80025cc:	40021000 	.word	0x40021000
 80025d0:	00001388 	.word	0x00001388
 80025d4:	fffff8ff 	.word	0xfffff8ff
 80025d8:	08002778 	.word	0x08002778
 80025dc:	20000008 	.word	0x20000008

080025e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b08f      	sub	sp, #60	; 0x3c
 80025e4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80025e6:	2314      	movs	r3, #20
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	4a2b      	ldr	r2, [pc, #172]	; (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025ee:	c313      	stmia	r3!, {r0, r1, r4}
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	4a29      	ldr	r2, [pc, #164]	; (800269c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80025fa:	c313      	stmia	r3!, {r0, r1, r4}
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002604:	2300      	movs	r3, #0
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28
 8002608:	2300      	movs	r3, #0
 800260a:	637b      	str	r3, [r7, #52]	; 0x34
 800260c:	2300      	movs	r3, #0
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002614:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	220c      	movs	r2, #12
 800261e:	4013      	ands	r3, r2
 8002620:	2b04      	cmp	r3, #4
 8002622:	d002      	beq.n	800262a <HAL_RCC_GetSysClockFreq+0x4a>
 8002624:	2b08      	cmp	r3, #8
 8002626:	d003      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x50>
 8002628:	e02d      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800262a:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800262c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800262e:	e02d      	b.n	800268c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	0c9b      	lsrs	r3, r3, #18
 8002634:	220f      	movs	r2, #15
 8002636:	4013      	ands	r3, r2
 8002638:	2214      	movs	r2, #20
 800263a:	18ba      	adds	r2, r7, r2
 800263c:	5cd3      	ldrb	r3, [r2, r3]
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002640:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	220f      	movs	r2, #15
 8002646:	4013      	ands	r3, r2
 8002648:	1d3a      	adds	r2, r7, #4
 800264a:	5cd3      	ldrb	r3, [r2, r3]
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800264e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	025b      	lsls	r3, r3, #9
 8002654:	4013      	ands	r3, r2
 8002656:	d009      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800265a:	4812      	ldr	r0, [pc, #72]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800265c:	f7fd fd54 	bl	8000108 <__udivsi3>
 8002660:	0003      	movs	r3, r0
 8002662:	001a      	movs	r2, r3
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	4353      	muls	r3, r2
 8002668:	637b      	str	r3, [r7, #52]	; 0x34
 800266a:	e009      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800266c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800266e:	000a      	movs	r2, r1
 8002670:	0152      	lsls	r2, r2, #5
 8002672:	1a52      	subs	r2, r2, r1
 8002674:	0193      	lsls	r3, r2, #6
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	185b      	adds	r3, r3, r1
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002684:	e002      	b.n	800268c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002688:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800268a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800268e:	0018      	movs	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	b00f      	add	sp, #60	; 0x3c
 8002694:	bd90      	pop	{r4, r7, pc}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	08002718 	.word	0x08002718
 800269c:	08002728 	.word	0x08002728
 80026a0:	40021000 	.word	0x40021000
 80026a4:	007a1200 	.word	0x007a1200

080026a8 <__libc_init_array>:
 80026a8:	b570      	push	{r4, r5, r6, lr}
 80026aa:	2600      	movs	r6, #0
 80026ac:	4d0c      	ldr	r5, [pc, #48]	; (80026e0 <__libc_init_array+0x38>)
 80026ae:	4c0d      	ldr	r4, [pc, #52]	; (80026e4 <__libc_init_array+0x3c>)
 80026b0:	1b64      	subs	r4, r4, r5
 80026b2:	10a4      	asrs	r4, r4, #2
 80026b4:	42a6      	cmp	r6, r4
 80026b6:	d109      	bne.n	80026cc <__libc_init_array+0x24>
 80026b8:	2600      	movs	r6, #0
 80026ba:	f000 f821 	bl	8002700 <_init>
 80026be:	4d0a      	ldr	r5, [pc, #40]	; (80026e8 <__libc_init_array+0x40>)
 80026c0:	4c0a      	ldr	r4, [pc, #40]	; (80026ec <__libc_init_array+0x44>)
 80026c2:	1b64      	subs	r4, r4, r5
 80026c4:	10a4      	asrs	r4, r4, #2
 80026c6:	42a6      	cmp	r6, r4
 80026c8:	d105      	bne.n	80026d6 <__libc_init_array+0x2e>
 80026ca:	bd70      	pop	{r4, r5, r6, pc}
 80026cc:	00b3      	lsls	r3, r6, #2
 80026ce:	58eb      	ldr	r3, [r5, r3]
 80026d0:	4798      	blx	r3
 80026d2:	3601      	adds	r6, #1
 80026d4:	e7ee      	b.n	80026b4 <__libc_init_array+0xc>
 80026d6:	00b3      	lsls	r3, r6, #2
 80026d8:	58eb      	ldr	r3, [r5, r3]
 80026da:	4798      	blx	r3
 80026dc:	3601      	adds	r6, #1
 80026de:	e7f2      	b.n	80026c6 <__libc_init_array+0x1e>
 80026e0:	08002788 	.word	0x08002788
 80026e4:	08002788 	.word	0x08002788
 80026e8:	08002788 	.word	0x08002788
 80026ec:	0800278c 	.word	0x0800278c

080026f0 <memset>:
 80026f0:	0003      	movs	r3, r0
 80026f2:	1812      	adds	r2, r2, r0
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d100      	bne.n	80026fa <memset+0xa>
 80026f8:	4770      	bx	lr
 80026fa:	7019      	strb	r1, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	e7f9      	b.n	80026f4 <memset+0x4>

08002700 <_init>:
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002706:	bc08      	pop	{r3}
 8002708:	469e      	mov	lr, r3
 800270a:	4770      	bx	lr

0800270c <_fini>:
 800270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002712:	bc08      	pop	{r3}
 8002714:	469e      	mov	lr, r3
 8002716:	4770      	bx	lr
